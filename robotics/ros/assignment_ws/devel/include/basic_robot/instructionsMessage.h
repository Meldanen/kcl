// Generated by gencpp from file basic_robot/instructionsMessage.msg
// DO NOT EDIT!


#ifndef BASIC_ROBOT_MESSAGE_INSTRUCTIONSMESSAGE_H
#define BASIC_ROBOT_MESSAGE_INSTRUCTIONSMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace basic_robot
{
template <class ContainerAllocator>
struct instructionsMessage_
{
  typedef instructionsMessage_<ContainerAllocator> Type;

  instructionsMessage_()
    : mode()
    , node()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , joint1(0.0)
    , joint2(0.0)
    , success()
    , position()  {
    }
  instructionsMessage_(const ContainerAllocator& _alloc)
    : mode(_alloc)
    , node(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , joint1(0.0)
    , joint2(0.0)
    , success(_alloc)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_type;
  _node_type node;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _joint1_type;
  _joint1_type joint1;

   typedef float _joint2_type;
  _joint2_type joint2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::basic_robot::instructionsMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::basic_robot::instructionsMessage_<ContainerAllocator> const> ConstPtr;

}; // struct instructionsMessage_

typedef ::basic_robot::instructionsMessage_<std::allocator<void> > instructionsMessage;

typedef boost::shared_ptr< ::basic_robot::instructionsMessage > instructionsMessagePtr;
typedef boost::shared_ptr< ::basic_robot::instructionsMessage const> instructionsMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::basic_robot::instructionsMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::basic_robot::instructionsMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace basic_robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'basic_robot': ['C:/kcl/robotics/ros/assignment_ws/src/basic_robot/msg'], 'std_msgs': ['C:/opt/ros/melodic/x64/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::basic_robot::instructionsMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::basic_robot::instructionsMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::basic_robot::instructionsMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::basic_robot::instructionsMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::basic_robot::instructionsMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::basic_robot::instructionsMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::basic_robot::instructionsMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dce5d09282a85b8a1e1879ae10e63b6f";
  }

  static const char* value(const ::basic_robot::instructionsMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdce5d09282a85b8aULL;
  static const uint64_t static_value2 = 0x1e1879ae10e63b6fULL;
};

template<class ContainerAllocator>
struct DataType< ::basic_robot::instructionsMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "basic_robot/instructionsMessage";
  }

  static const char* value(const ::basic_robot::instructionsMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::basic_robot::instructionsMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mode\n"
"string node\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 joint1\n"
"float32 joint2\n"
"string success\n"
"string position\n"
;
  }

  static const char* value(const ::basic_robot::instructionsMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::basic_robot::instructionsMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.node);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.joint1);
      stream.next(m.joint2);
      stream.next(m.success);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct instructionsMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::basic_robot::instructionsMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::basic_robot::instructionsMessage_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "joint1: ";
    Printer<float>::stream(s, indent + "  ", v.joint1);
    s << indent << "joint2: ";
    Printer<float>::stream(s, indent + "  ", v.joint2);
    s << indent << "success: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.success);
    s << indent << "position: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASIC_ROBOT_MESSAGE_INSTRUCTIONSMESSAGE_H
