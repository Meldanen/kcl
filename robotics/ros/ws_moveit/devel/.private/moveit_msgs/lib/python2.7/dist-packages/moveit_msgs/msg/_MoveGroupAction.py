# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_msgs/MoveGroupAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import actionlib_msgs.msg
import geometry_msgs.msg
import shape_msgs.msg
import octomap_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import sensor_msgs.msg
import genpy
import std_msgs.msg

class MoveGroupAction(genpy.Message):
  _md5sum = "bcc603e634826f2481516b4779bdde17"
  _type = "moveit_msgs/MoveGroupAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

MoveGroupActionGoal action_goal
MoveGroupActionResult action_result
MoveGroupActionFeedback action_feedback

================================================================================
MSG: moveit_msgs/MoveGroupActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
MoveGroupGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: moveit_msgs/MoveGroupGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Motion planning request to pass to planner
MotionPlanRequest request

# Planning options
PlanningOptions planning_options


================================================================================
MSG: moveit_msgs/MotionPlanRequest
# This service contains the definition for a request to the motion
# planner and the output it provides

# Parameters for the workspace that the planner should work inside
WorkspaceParameters workspace_parameters

# Starting state updates. If certain joints should be considered
# at positions other than the current ones, these positions should
# be set here
RobotState start_state

# The possible goal states for the model to plan for. Each element of
# the array defines a goal region. The goal is achieved
# if the constraints for a particular region are satisfied
Constraints[] goal_constraints

# No state at any point along the path in the produced motion plan will violate these constraints (this applies to all points, not just waypoints)
Constraints path_constraints

# The constraints the resulting trajectory must satisfy
TrajectoryConstraints trajectory_constraints

# A set of trajectories that may be used as reference or initial trajectories for (typically optimization-based) planners
# These trajectories do not override start_state or goal_constraints
GenericTrajectory[] reference_trajectories

# The name of the motion planner to use. If no name is specified,
# a default motion planner will be used
string planner_id

# The name of the group of joints on which this planner is operating
string group_name

# The number of times this plan is to be computed. Shortest solution
# will be reported.
int32 num_planning_attempts

# The maximum amount of time the motion planner is allowed to plan for (in seconds)
float64 allowed_planning_time

# Scaling factors for optionally reducing the maximum joint velocities and
# accelerations.  Allowed values are in (0,1].  The maximum joint velocity and
# acceleration specified in the robot model are multiplied by thier respective
# factors.  If either are outside their valid ranges (importantly, this
# includes being set to 0.0), the factor is set to the default value of 1.0
# internally (i.e., maximum joint velocity or maximum joint acceleration).
float64 max_velocity_scaling_factor
float64 max_acceleration_scaling_factor


================================================================================
MSG: moveit_msgs/WorkspaceParameters
# This message contains a set of parameters useful in
# setting up the volume (a box) in which the robot is allowed to move.
# This is useful only when planning for mobile parts of 
# the robot as well.

# Define the frame of reference for the box corners
Header header

# The minumum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 min_corner

# The maximum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 max_corner

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached 
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the specified header

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Named subframes on the object. Use these to define points of interest on the object that you want
# to plan with (e.g. "tip", "spout", "handle"). The id of the object will be prepended to the subframe.
# If an object with the id "screwdriver" and a subframe "tip" is in the scene, you can use the frame
# "screwdriver/tip" for planning.
# The length of the subframe_names and subframe_poses has to be identical.
string[] subframe_names
geometry_msgs/Pose[] subframe_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: moveit_msgs/Constraints
# This message contains a list of motion planning constraints.
# All constraints must be satisfied for a goal to be considered valid

string name

JointConstraint[] joint_constraints

PositionConstraint[] position_constraints

OrientationConstraint[] orientation_constraints

VisibilityConstraint[] visibility_constraints

================================================================================
MSG: moveit_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight
================================================================================
MSG: moveit_msgs/PositionConstraint
# This message contains the definition of a position constraint.

Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Vector3 target_point_offset

# The volume this constraint refers to 
BoundingVolume constraint_region

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/BoundingVolume
# Define a volume in 3D

# A set of solid geometric primitives that make up the volume to define (as a union)
shape_msgs/SolidPrimitive[] primitives

# The poses at which the primitives are located
geometry_msgs/Pose[] primitive_poses

# In addition to primitives, meshes can be specified to add to the bounding volume (again, as union)
shape_msgs/Mesh[] meshes

# The poses at which the meshes are located
geometry_msgs/Pose[] mesh_poses

================================================================================
MSG: moveit_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.

Header header

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# The robot link this constraint refers to
string link_name

# optional axis-angle error tolerances specified
float64 absolute_x_axis_tolerance
float64 absolute_y_axis_tolerance
float64 absolute_z_axis_tolerance

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/VisibilityConstraint
# The constraint is useful to maintain visibility to a disc (the target) in a particular frame.
# This disc forms the base of a visibiliy cone whose tip is at the origin of the sensor.
# Maintaining visibility is done by ensuring the robot does not obstruct the visibility cone.
# Note:
# This constraint does NOT enforce minimum or maximum distances between the sensor
# and the target, nor does it enforce the target to be in the field of view of
# the sensor. A PositionConstraint can (and probably should) be used for such purposes.

# The radius of the disc that should be maintained visible 
float64 target_radius

# The pose of the disc; as the robot moves, the pose of the disc may change as well
# This can be in the frame of a particular robot link, for example
geometry_msgs/PoseStamped target_pose

# From the sensor origin towards the target, the disc forms a visibility cone
# This cone is approximated using many sides. For example, when using 4 sides, 
# that in fact makes the visibility region be a pyramid.
# This value should always be 3 or more.
int32 cone_sides

# The pose in which visibility is to be maintained.
# The frame id should represent the robot link to which the sensor is attached.
# It is assumed the sensor can look directly at the target, in any direction.
# This assumption is usually not true, but additional PositionConstraints
# can resolve this issue.
geometry_msgs/PoseStamped sensor_pose

# Even though the disc is maintained visible, the visibility cone can be very small
# because of the orientation of the disc with respect to the sensor. It is possible
# for example to view the disk almost from a side, in which case the visibility cone 
# can end up having close to 0 volume. The view angle is defined to be the angle between
# the normal to the visibility disc and the direction vector from the sensor origin.
# The value below represents the minimum desired view angle. For a perfect view,
# this value will be 0 (the two vectors are exact opposites). For a completely obstructed view
# this value will be Pi/2 (the vectors are perpendicular). This value defined below 
# is the maximum view angle to be maintained. This should be a value in the open interval
# (0, Pi/2). If 0 is set, the view angle is NOT enforced.
float64 max_view_angle

# This angle is used similarly to max_view_angle but limits the maximum angle
# between the sensor origin direction vector and the axis that connects the
# sensor origin to the target frame origin. The value is again in the range (0, Pi/2)
# and is NOT enforced if set to 0.
float64 max_range_angle

# The axis that is assumed to indicate the direction of view for the sensor
# X = 2, Y = 1, Z = 0
uint8 SENSOR_Z=0
uint8 SENSOR_Y=1
uint8 SENSOR_X=2
uint8 sensor_view_direction

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: moveit_msgs/TrajectoryConstraints
# The array of constraints to consider along the trajectory
Constraints[] constraints

================================================================================
MSG: moveit_msgs/GenericTrajectory
# A generic trajectory message that may either encode a joint- or cartesian-space trajectory, or both
# Trajectories encoded in this message are considered semantically equivalent
Header header
trajectory_msgs/JointTrajectory[] joint_trajectory
moveit_msgs/CartesianTrajectory[] cartesian_trajectory

================================================================================
MSG: moveit_msgs/CartesianTrajectory
# This message describes the trajectory of a tracked frame in task-space
Header header

# The name of the Cartesian frame being tracked with respect to the base frame provided in header.frame_id
string tracked_frame

CartesianTrajectoryPoint[] points

================================================================================
MSG: moveit_msgs/CartesianTrajectoryPoint
# The definition of a cartesian point in a trajectory. Defines the cartesian state of the point and it's time,
# following the pattern of the JointTrajectory message
CartesianPoint point

duration time_from_start

================================================================================
MSG: moveit_msgs/CartesianPoint
# This message defines a point in a cartesian trajectory
geometry_msgs/Pose pose
geometry_msgs/Twist velocity
geometry_msgs/Accel acceleration
================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: moveit_msgs/PlanningOptions

# The diff to consider for the planning scene (optional)
PlanningScene planning_scene_diff

# If this flag is set to true, the action
# returns an executable plan in the response but does not attempt execution  
bool plan_only

# If this flag is set to true, the action of planning &
# executing is allowed to look around  (move sensors) if
# it seems that not enough information is available about
# the environment
bool look_around

# If this value is positive, the action of planning & executing
# is allowed to look around for a maximum number of attempts;
# If the value is left as 0, the default value is used, as set
# with dynamic_reconfigure
int32 look_around_attempts

# If set and if look_around is true, this value is used as
# the maximum cost allowed for a path to be considered executable.
# If the cost of a path is higher than this value, more sensing or 
# a new plan needed. If left as 0.0 but look_around is true, then 
# the default value set via dynamic_reconfigure is used
float64 max_safe_execution_cost

# If the plan becomes invalidated during execution, it is possible to have
# that plan recomputed and execution restarted. This flag enables this
# functionality 
bool replan

# The maximum number of replanning attempts 
int32 replan_attempts

# The amount of time to wait in between replanning attempts (in seconds)
float64 replan_delay

================================================================================
MSG: moveit_msgs/PlanningScene
# name of planning scene
string name

# full robot state
RobotState robot_state

# The name of the robot model this scene is for
string robot_model_name

#additional frames for duplicating tf (with respect to the planning frame)
geometry_msgs/TransformStamped[] fixed_frame_transforms

#full allowed collision matrix
AllowedCollisionMatrix allowed_collision_matrix

# all link paddings
LinkPadding[] link_padding

# all link scales
LinkScale[] link_scale

# Attached objects, collision objects, even the octomap or collision map can have 
# colors associated to them. This array specifies them.
ObjectColor[] object_colors

# the collision map
PlanningSceneWorld world

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
bool is_diff

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://wiki.ros.org/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: moveit_msgs/AllowedCollisionMatrix
# The list of entry names in the matrix
string[] entry_names

# The individual entries in the allowed collision matrix
# square, symmetric, with same order as entry_names
AllowedCollisionEntry[] entry_values

# In addition to the collision matrix itself, we also have 
# the default entry value for each entry name.

# If the allowed collision flag is queried for a pair of names (n1, n2)
# that is not found in the collision matrix itself, the value of
# the collision flag is considered to be that of the entry (n1 or n2)
# specified in the list below. If both n1 and n2 are found in the list 
# of defaults, the result is computed with an AND operation

string[] default_entry_names
bool[] default_entry_values

================================================================================
MSG: moveit_msgs/AllowedCollisionEntry
# whether or not collision checking is enabled
bool[] enabled

================================================================================
MSG: moveit_msgs/LinkPadding
#name for the link
string link_name

# padding to apply to the link
float64 padding

================================================================================
MSG: moveit_msgs/LinkScale
#name for the link
string link_name

# scaling to apply to the link
float64 scale

================================================================================
MSG: moveit_msgs/ObjectColor
# The object id for which we specify color
string id

# The value of the color
std_msgs/ColorRGBA color

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: moveit_msgs/PlanningSceneWorld
# collision objects
CollisionObject[] collision_objects

# The octomap that represents additional collision data
octomap_msgs/OctomapWithPose octomap

================================================================================
MSG: octomap_msgs/OctomapWithPose
# A 3D map in binary format, as Octree
Header header

# The pose of the octree with respect to the header frame 
geometry_msgs/Pose origin

# The actual octree msg
octomap_msgs/Octomap octomap

================================================================================
MSG: octomap_msgs/Octomap
# A 3D map in binary format, as Octree
Header header

# Flag to denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)
bool binary

# Class id of the contained octree 
string id

# Resolution (in m) of the smallest octree nodes
float64 resolution

# binary serialization of octree, use conversions.h to read and write octrees
int8[] data

================================================================================
MSG: moveit_msgs/MoveGroupActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MoveGroupResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: moveit_msgs/MoveGroupResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# An error code reflecting what went wrong
MoveItErrorCodes error_code

# The full starting state of the robot at the start of the trajectory
moveit_msgs/RobotState trajectory_start

# The trajectory that moved group produced for execution
moveit_msgs/RobotTrajectory planned_trajectory

# The trace of the trajectory recorded during execution
moveit_msgs/RobotTrajectory executed_trajectory

# The amount of time it took to complete the motion plan
float64 planning_time


================================================================================
MSG: moveit_msgs/MoveItErrorCodes
int32 val

# overall behavior
int32 SUCCESS=1
int32 FAILURE=99999

int32 PLANNING_FAILED=-1
int32 INVALID_MOTION_PLAN=-2
int32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3
int32 CONTROL_FAILED=-4
int32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5
int32 TIMED_OUT=-6
int32 PREEMPTED=-7

# planning & kinematics request errors
int32 START_STATE_IN_COLLISION=-10
int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11

int32 GOAL_IN_COLLISION=-12
int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13
int32 GOAL_CONSTRAINTS_VIOLATED=-14

int32 INVALID_GROUP_NAME=-15
int32 INVALID_GOAL_CONSTRAINTS=-16
int32 INVALID_ROBOT_STATE=-17
int32 INVALID_LINK_NAME=-18
int32 INVALID_OBJECT_NAME=-19

# system errors
int32 FRAME_TRANSFORM_FAILURE=-21
int32 COLLISION_CHECKING_UNAVAILABLE=-22
int32 ROBOT_STATE_STALE=-23
int32 SENSOR_INFO_STALE=-24

# kinematics errors
int32 NO_IK_SOLUTION=-31

================================================================================
MSG: moveit_msgs/RobotTrajectory
trajectory_msgs/JointTrajectory joint_trajectory
trajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectory
# The header is used to specify the coordinate frame and the reference time for the trajectory durations
Header header

# A representation of a multi-dof joint trajectory (each point is a transformation)
# Each point along the trajectory will include an array of positions/velocities/accelerations
# that has the same length as the array of joint names, and has the same order of joints as 
# the joint names array.

string[] joint_names
MultiDOFJointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectoryPoint
# Each multi-dof joint can specify a transform (up to 6 DOF)
geometry_msgs/Transform[] transforms

# There can be a velocity specified for the origin of the joint 
geometry_msgs/Twist[] velocities

# There can be an acceleration specified for the origin of the joint 
geometry_msgs/Twist[] accelerations

duration time_from_start

================================================================================
MSG: moveit_msgs/MoveGroupActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MoveGroupFeedback feedback

================================================================================
MSG: moveit_msgs/MoveGroupFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# The internal state that the move group action currently is in
string state

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['moveit_msgs/MoveGroupActionGoal','moveit_msgs/MoveGroupActionResult','moveit_msgs/MoveGroupActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveGroupAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = moveit_msgs.msg.MoveGroupActionGoal()
      if self.action_result is None:
        self.action_result = moveit_msgs.msg.MoveGroupActionResult()
      if self.action_feedback is None:
        self.action_feedback = moveit_msgs.msg.MoveGroupActionFeedback()
    else:
      self.action_goal = moveit_msgs.msg.MoveGroupActionGoal()
      self.action_result = moveit_msgs.msg.MoveGroupActionResult()
      self.action_feedback = moveit_msgs.msg.MoveGroupActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.request.workspace_parameters.header.seq, _x.action_goal.goal.request.workspace_parameters.header.stamp.secs, _x.action_goal.goal.request.workspace_parameters.header.stamp.nsecs))
      _x = self.action_goal.goal.request.workspace_parameters.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d3I().pack(_x.action_goal.goal.request.workspace_parameters.min_corner.x, _x.action_goal.goal.request.workspace_parameters.min_corner.y, _x.action_goal.goal.request.workspace_parameters.min_corner.z, _x.action_goal.goal.request.workspace_parameters.max_corner.x, _x.action_goal.goal.request.workspace_parameters.max_corner.y, _x.action_goal.goal.request.workspace_parameters.max_corner.z, _x.action_goal.goal.request.start_state.joint_state.header.seq, _x.action_goal.goal.request.start_state.joint_state.header.stamp.secs, _x.action_goal.goal.request.start_state.joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.request.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.request.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.request.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.request.start_state.joint_state.position))
      length = len(self.action_goal.goal.request.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.request.start_state.joint_state.velocity))
      length = len(self.action_goal.goal.request.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.request.start_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.request.start_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.request.start_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.request.start_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.request.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.request.start_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.multi_dof_joint_state.transforms:
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.request.start_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.multi_dof_joint_state.twist:
        _v3 = val1.linear
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.angular
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.request.start_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.multi_dof_joint_state.wrench:
        _v5 = val1.force
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.torque
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.request.start_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v7 = val1.object
        _v8 = _v7.header
        buff.write(_get_struct_I().pack(_v8.seq))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v7.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v10 = _v7.type
        _x = _v10.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v10.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v7.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v7.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitive_poses:
          _v11 = val3.position
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v12 = val3.orientation
          _x = _v12
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v7.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.mesh_poses:
          _v13 = val3.position
          _x = _v13
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v14 = val3.orientation
          _x = _v14
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v7.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.plane_poses:
          _v15 = val3.position
          _x = _v15
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v16 = val3.orientation
          _x = _v16
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v7.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_poses:
          _v17 = val3.position
          _x = _v17
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v18 = val3.orientation
          _x = _v18
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v7.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v19 = val1.detach_posture
        _v20 = _v19.header
        buff.write(_get_struct_I().pack(_v20.seq))
        _v21 = _v20.stamp
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v20.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v19.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v19.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v22 = val3.time_from_start
          _x = _v22
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      buff.write(_get_struct_B().pack(self.action_goal.goal.request.start_state.is_diff))
      length = len(self.action_goal.goal.request.goal_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.goal_constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v23 = val2.header
          buff.write(_get_struct_I().pack(_v23.seq))
          _v24 = _v23.stamp
          _x = _v24
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v23.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v25 = val2.target_point_offset
          _x = _v25
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v26 = val2.constraint_region
          length = len(_v26.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v26.primitives:
            buff.write(_get_struct_B().pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.dimensions))
          length = len(_v26.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v26.primitive_poses:
            _v27 = val4.position
            _x = _v27
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v28 = val4.orientation
            _x = _v28
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v26.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v26.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(_get_struct_3I().pack(*val5.vertex_indices))
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v26.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v26.mesh_poses:
            _v29 = val4.position
            _x = _v29
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v30 = val4.orientation
            _x = _v30
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_d().pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v31 = val2.header
          buff.write(_get_struct_I().pack(_v31.seq))
          _v32 = _v31.stamp
          _x = _v32
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v31.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v33 = val2.orientation
          _x = _v33
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_get_struct_d().pack(val2.target_radius))
          _v34 = val2.target_pose
          _v35 = _v34.header
          buff.write(_get_struct_I().pack(_v35.seq))
          _v36 = _v35.stamp
          _x = _v36
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v35.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v37 = _v34.pose
          _v38 = _v37.position
          _x = _v38
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v39 = _v37.orientation
          _x = _v39
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_i().pack(val2.cone_sides))
          _v40 = val2.sensor_pose
          _v41 = _v40.header
          buff.write(_get_struct_I().pack(_v41.seq))
          _v42 = _v41.stamp
          _x = _v42
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v41.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v43 = _v40.pose
          _v44 = _v43.position
          _x = _v44
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v45 = _v43.orientation
          _x = _v45
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.action_goal.goal.request.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.request.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.action_goal.goal.request.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.path_constraints.position_constraints:
        _v46 = val1.header
        buff.write(_get_struct_I().pack(_v46.seq))
        _v47 = _v46.stamp
        _x = _v47
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v46.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v48 = val1.target_point_offset
        _x = _v48
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v49 = val1.constraint_region
        length = len(_v49.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v49.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.primitive_poses:
          _v50 = val3.position
          _x = _v50
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v51 = val3.orientation
          _x = _v51
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v49.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v49.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.mesh_poses:
          _v52 = val3.position
          _x = _v52
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v53 = val3.orientation
          _x = _v53
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_d().pack(val1.weight))
      length = len(self.action_goal.goal.request.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.path_constraints.orientation_constraints:
        _v54 = val1.header
        buff.write(_get_struct_I().pack(_v54.seq))
        _v55 = _v54.stamp
        _x = _v55
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v54.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v56 = val1.orientation
        _x = _v56
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
      length = len(self.action_goal.goal.request.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.path_constraints.visibility_constraints:
        buff.write(_get_struct_d().pack(val1.target_radius))
        _v57 = val1.target_pose
        _v58 = _v57.header
        buff.write(_get_struct_I().pack(_v58.seq))
        _v59 = _v58.stamp
        _x = _v59
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v58.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v60 = _v57.pose
        _v61 = _v60.position
        _x = _v61
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v62 = _v60.orientation
        _x = _v62
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_i().pack(val1.cone_sides))
        _v63 = val1.sensor_pose
        _v64 = _v63.header
        buff.write(_get_struct_I().pack(_v64.seq))
        _v65 = _v64.stamp
        _x = _v65
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v64.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v66 = _v63.pose
        _v67 = _v66.position
        _x = _v67
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v68 = _v66.orientation
        _x = _v68
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.action_goal.goal.request.trajectory_constraints.constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.trajectory_constraints.constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v69 = val2.header
          buff.write(_get_struct_I().pack(_v69.seq))
          _v70 = _v69.stamp
          _x = _v70
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v69.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v71 = val2.target_point_offset
          _x = _v71
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v72 = val2.constraint_region
          length = len(_v72.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v72.primitives:
            buff.write(_get_struct_B().pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.dimensions))
          length = len(_v72.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v72.primitive_poses:
            _v73 = val4.position
            _x = _v73
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v74 = val4.orientation
            _x = _v74
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v72.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v72.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(_get_struct_3I().pack(*val5.vertex_indices))
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v72.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v72.mesh_poses:
            _v75 = val4.position
            _x = _v75
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v76 = val4.orientation
            _x = _v76
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_d().pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v77 = val2.header
          buff.write(_get_struct_I().pack(_v77.seq))
          _v78 = _v77.stamp
          _x = _v78
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v77.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v79 = val2.orientation
          _x = _v79
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_get_struct_d().pack(val2.target_radius))
          _v80 = val2.target_pose
          _v81 = _v80.header
          buff.write(_get_struct_I().pack(_v81.seq))
          _v82 = _v81.stamp
          _x = _v82
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v81.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v83 = _v80.pose
          _v84 = _v83.position
          _x = _v84
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v85 = _v83.orientation
          _x = _v85
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_i().pack(val2.cone_sides))
          _v86 = val2.sensor_pose
          _v87 = _v86.header
          buff.write(_get_struct_I().pack(_v87.seq))
          _v88 = _v87.stamp
          _x = _v88
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v87.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v89 = _v86.pose
          _v90 = _v89.position
          _x = _v90
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v91 = _v89.orientation
          _x = _v91
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.action_goal.goal.request.reference_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.reference_trajectories:
        _v92 = val1.header
        buff.write(_get_struct_I().pack(_v92.seq))
        _v93 = _v92.stamp
        _x = _v93
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v92.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_trajectory:
          _v94 = val2.header
          buff.write(_get_struct_I().pack(_v94.seq))
          _v95 = _v94.stamp
          _x = _v95
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v94.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.joint_names)
          buff.write(_struct_I.pack(length))
          for val3 in val2.joint_names:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.pack('<I%ss'%length, length, val3))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.positions))
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.velocities))
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.accelerations))
            length = len(val3.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.effort))
            _v96 = val3.time_from_start
            _x = _v96
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.cartesian_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.cartesian_trajectory:
          _v97 = val2.header
          buff.write(_get_struct_I().pack(_v97.seq))
          _v98 = _v97.stamp
          _x = _v98
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v97.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.tracked_frame
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _v99 = val3.point
            _v100 = _v99.pose
            _v101 = _v100.position
            _x = _v101
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v102 = _v100.orientation
            _x = _v102
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _v103 = _v99.velocity
            _v104 = _v103.linear
            _x = _v104
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v105 = _v103.angular
            _x = _v105
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v106 = _v99.acceleration
            _v107 = _v106.linear
            _x = _v107
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v108 = _v106.angular
            _x = _v108
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v109 = val3.time_from_start
            _x = _v109
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self.action_goal.goal.request.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.request.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.action_goal.goal.request.num_planning_attempts, _x.action_goal.goal.request.allowed_planning_time, _x.action_goal.goal.request.max_velocity_scaling_factor, _x.action_goal.goal.request.max_acceleration_scaling_factor))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v110 = val1.translation
        _x = _v110
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v111 = val1.rotation
        _x = _v111
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v112 = val1.linear
        _x = _v112
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v113 = val1.angular
        _x = _v113
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v114 = val1.force
        _x = _v114
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v115 = val1.torque
        _x = _v115
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v116 = val1.object
        _v117 = _v116.header
        buff.write(_get_struct_I().pack(_v117.seq))
        _v118 = _v117.stamp
        _x = _v118
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v117.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v116.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v119 = _v116.type
        _x = _v119.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v119.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v116.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v116.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.primitive_poses:
          _v120 = val3.position
          _x = _v120
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v121 = val3.orientation
          _x = _v121
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v116.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v116.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.mesh_poses:
          _v122 = val3.position
          _x = _v122
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v123 = val3.orientation
          _x = _v123
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v116.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v116.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.plane_poses:
          _v124 = val3.position
          _x = _v124
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v125 = val3.orientation
          _x = _v125
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v116.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v116.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.subframe_poses:
          _v126 = val3.position
          _x = _v126
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v127 = val3.orientation
          _x = _v127
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v116.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v128 = val1.detach_posture
        _v129 = _v128.header
        buff.write(_get_struct_I().pack(_v129.seq))
        _v130 = _v129.stamp
        _x = _v130
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v129.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v128.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v128.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v128.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v128.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v131 = val3.time_from_start
          _x = _v131
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      buff.write(_get_struct_B().pack(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v132 = val1.header
        buff.write(_get_struct_I().pack(_v132.seq))
        _v133 = _v132.stamp
        _x = _v133
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v132.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v134 = val1.transform
        _v135 = _v134.translation
        _x = _v135
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v136 = _v134.rotation
        _x = _v136
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.pack(pattern, *val1.enabled))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.padding))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.scale))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v137 = val1.color
        _x = _v137
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects:
        _v138 = val1.header
        buff.write(_get_struct_I().pack(_v138.seq))
        _v139 = _v138.stamp
        _x = _v139
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v138.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v140 = val1.type
        _x = _v140.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v140.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_get_struct_B().pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.dimensions))
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v141 = val2.position
          _x = _v141
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v142 = val2.orientation
          _x = _v142
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(_get_struct_3I().pack(*val3.vertex_indices))
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v143 = val2.position
          _x = _v143
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v144 = val2.orientation
          _x = _v144
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(_get_struct_4d().pack(*val2.coef))
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v145 = val2.position
          _x = _v145
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v146 = val2.orientation
          _x = _v146
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v147 = val2.position
          _x = _v147
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v148 = val2.orientation
          _x = _v148
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(val1.operation))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data))
      _x = self
      buff.write(_get_struct_3BidBid3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.action_result.result.error_code.val, _x.action_result.result.trajectory_start.joint_state.header.seq, _x.action_result.result.trajectory_start.joint_state.header.stamp.secs, _x.action_result.result.trajectory_start.joint_state.header.stamp.nsecs))
      _x = self.action_result.result.trajectory_start.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.trajectory_start.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.trajectory_start.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.trajectory_start.joint_state.position))
      length = len(self.action_result.result.trajectory_start.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.trajectory_start.joint_state.velocity))
      length = len(self.action_result.result.trajectory_start.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.action_result.result.trajectory_start.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.trajectory_start.multi_dof_joint_state.header.seq, _x.action_result.result.trajectory_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.trajectory_start.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_result.result.trajectory_start.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.trajectory_start.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.trajectory_start.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.multi_dof_joint_state.transforms:
        _v149 = val1.translation
        _x = _v149
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v150 = val1.rotation
        _x = _v150
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_result.result.trajectory_start.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.multi_dof_joint_state.twist:
        _v151 = val1.linear
        _x = _v151
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v152 = val1.angular
        _x = _v152
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.trajectory_start.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.multi_dof_joint_state.wrench:
        _v153 = val1.force
        _x = _v153
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v154 = val1.torque
        _x = _v154
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.trajectory_start.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v155 = val1.object
        _v156 = _v155.header
        buff.write(_get_struct_I().pack(_v156.seq))
        _v157 = _v156.stamp
        _x = _v157
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v156.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v155.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v158 = _v155.type
        _x = _v158.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v158.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v155.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v155.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v155.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v155.primitive_poses:
          _v159 = val3.position
          _x = _v159
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v160 = val3.orientation
          _x = _v160
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v155.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v155.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v155.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v155.mesh_poses:
          _v161 = val3.position
          _x = _v161
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v162 = val3.orientation
          _x = _v162
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v155.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v155.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v155.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v155.plane_poses:
          _v163 = val3.position
          _x = _v163
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v164 = val3.orientation
          _x = _v164
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v155.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v155.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v155.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v155.subframe_poses:
          _v165 = val3.position
          _x = _v165
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v166 = val3.orientation
          _x = _v166
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v155.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v167 = val1.detach_posture
        _v168 = _v167.header
        buff.write(_get_struct_I().pack(_v168.seq))
        _v169 = _v168.stamp
        _x = _v169
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v168.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v167.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v167.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v167.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v167.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v170 = val3.time_from_start
          _x = _v170
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_result.result.trajectory_start.is_diff, _x.action_result.result.planned_trajectory.joint_trajectory.header.seq, _x.action_result.result.planned_trajectory.joint_trajectory.header.stamp.secs, _x.action_result.result.planned_trajectory.joint_trajectory.header.stamp.nsecs))
      _x = self.action_result.result.planned_trajectory.joint_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.planned_trajectory.joint_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.planned_trajectory.joint_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.planned_trajectory.joint_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.planned_trajectory.joint_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.effort))
        _v171 = val1.time_from_start
        _x = _v171
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.seq, _x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.stamp.secs, _x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.stamp.nsecs))
      _x = self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.points:
        length = len(val1.transforms)
        buff.write(_struct_I.pack(length))
        for val2 in val1.transforms:
          _v172 = val2.translation
          _x = _v172
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v173 = val2.rotation
          _x = _v173
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        for val2 in val1.velocities:
          _v174 = val2.linear
          _x = _v174
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v175 = val2.angular
          _x = _v175
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.accelerations:
          _v176 = val2.linear
          _x = _v176
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v177 = val2.angular
          _x = _v177
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v178 = val1.time_from_start
        _x = _v178
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.executed_trajectory.joint_trajectory.header.seq, _x.action_result.result.executed_trajectory.joint_trajectory.header.stamp.secs, _x.action_result.result.executed_trajectory.joint_trajectory.header.stamp.nsecs))
      _x = self.action_result.result.executed_trajectory.joint_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.executed_trajectory.joint_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_trajectory.joint_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.executed_trajectory.joint_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_trajectory.joint_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.effort))
        _v179 = val1.time_from_start
        _x = _v179
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.seq, _x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.stamp.secs, _x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.stamp.nsecs))
      _x = self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.points:
        length = len(val1.transforms)
        buff.write(_struct_I.pack(length))
        for val2 in val1.transforms:
          _v180 = val2.translation
          _x = _v180
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v181 = val2.rotation
          _x = _v181
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        for val2 in val1.velocities:
          _v182 = val2.linear
          _x = _v182
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v183 = val2.angular
          _x = _v183
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.accelerations:
          _v184 = val2.linear
          _x = _v184
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v185 = val2.angular
          _x = _v185
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v186 = val1.time_from_start
        _x = _v186
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.action_result.result.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = moveit_msgs.msg.MoveGroupActionGoal()
      if self.action_result is None:
        self.action_result = moveit_msgs.msg.MoveGroupActionResult()
      if self.action_feedback is None:
        self.action_feedback = moveit_msgs.msg.MoveGroupActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.request.workspace_parameters.header.seq, _x.action_goal.goal.request.workspace_parameters.header.stamp.secs, _x.action_goal.goal.request.workspace_parameters.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.workspace_parameters.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.workspace_parameters.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.action_goal.goal.request.workspace_parameters.min_corner.x, _x.action_goal.goal.request.workspace_parameters.min_corner.y, _x.action_goal.goal.request.workspace_parameters.min_corner.z, _x.action_goal.goal.request.workspace_parameters.max_corner.x, _x.action_goal.goal.request.workspace_parameters.max_corner.y, _x.action_goal.goal.request.workspace_parameters.max_corner.z, _x.action_goal.goal.request.start_state.joint_state.header.seq, _x.action_goal.goal.request.start_state.joint_state.header.stamp.secs, _x.action_goal.goal.request.start_state.joint_state.header.stamp.nsecs,) = _get_struct_6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.request.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.request.start_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.request.start_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.request.start_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.request.start_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.request.start_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.request.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v187 = val1.translation
        _x = _v187
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v188 = val1.rotation
        _x = _v188
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.request.start_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v189 = val1.linear
        _x = _v189
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v190 = val1.angular
        _x = _v190
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.request.start_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v191 = val1.force
        _x = _v191
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v192 = val1.torque
        _x = _v192
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.request.start_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v193 = val1.object
        _v194 = _v193.header
        start = end
        end += 4
        (_v194.seq,) = _get_struct_I().unpack(str[start:end])
        _v195 = _v194.stamp
        _x = _v195
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v194.frame_id = str[start:end].decode('utf-8')
        else:
          _v194.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v193.id = str[start:end].decode('utf-8')
        else:
          _v193.id = str[start:end]
        _v196 = _v193.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v196.key = str[start:end].decode('utf-8')
        else:
          _v196.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v196.db = str[start:end].decode('utf-8')
        else:
          _v196.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v193.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v193.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v193.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v197 = val3.position
          _x = _v197
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v198 = val3.orientation
          _x = _v198
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v193.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v193.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v193.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v193.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v199 = val3.position
          _x = _v199
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v200 = val3.orientation
          _x = _v200
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v193.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v193.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v193.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v193.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v201 = val3.position
          _x = _v201
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v202 = val3.orientation
          _x = _v202
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v193.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v193.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v193.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v193.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v203 = val3.position
          _x = _v203
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v204 = val3.orientation
          _x = _v204
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v193.subframe_poses.append(val3)
        start = end
        end += 1
        (_v193.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v205 = val1.detach_posture
        _v206 = _v205.header
        start = end
        end += 4
        (_v206.seq,) = _get_struct_I().unpack(str[start:end])
        _v207 = _v206.stamp
        _x = _v207
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v206.frame_id = str[start:end].decode('utf-8')
        else:
          _v206.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v205.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v205.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v205.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v208 = val3.time_from_start
          _x = _v208
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v205.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.request.start_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_goal.goal.request.start_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.request.start_state.is_diff = bool(self.action_goal.goal.request.start_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.goal_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v209 = val2.header
          start = end
          end += 4
          (_v209.seq,) = _get_struct_I().unpack(str[start:end])
          _v210 = _v209.stamp
          _x = _v210
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v209.frame_id = str[start:end].decode('utf-8')
          else:
            _v209.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v211 = val2.target_point_offset
          _x = _v211
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v212 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v212.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = struct.unpack(pattern, str[start:end])
            _v212.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v212.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v213 = val4.position
            _x = _v213
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v214 = val4.orientation
            _x = _v214
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v212.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v212.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v212.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v212.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v215 = val4.position
            _x = _v215
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v216 = val4.orientation
            _x = _v216
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v212.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v217 = val2.header
          start = end
          end += 4
          (_v217.seq,) = _get_struct_I().unpack(str[start:end])
          _v218 = _v217.stamp
          _x = _v218
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v217.frame_id = str[start:end].decode('utf-8')
          else:
            _v217.frame_id = str[start:end]
          _v219 = val2.orientation
          _x = _v219
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v220 = val2.target_pose
          _v221 = _v220.header
          start = end
          end += 4
          (_v221.seq,) = _get_struct_I().unpack(str[start:end])
          _v222 = _v221.stamp
          _x = _v222
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v221.frame_id = str[start:end].decode('utf-8')
          else:
            _v221.frame_id = str[start:end]
          _v223 = _v220.pose
          _v224 = _v223.position
          _x = _v224
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v225 = _v223.orientation
          _x = _v225
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v226 = val2.sensor_pose
          _v227 = _v226.header
          start = end
          end += 4
          (_v227.seq,) = _get_struct_I().unpack(str[start:end])
          _v228 = _v227.stamp
          _x = _v228
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v227.frame_id = str[start:end].decode('utf-8')
          else:
            _v227.frame_id = str[start:end]
          _v229 = _v226.pose
          _v230 = _v229.position
          _x = _v230
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v231 = _v229.orientation
          _x = _v231
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.action_goal.goal.request.goal_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.path_constraints.name = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.request.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v232 = val1.header
        start = end
        end += 4
        (_v232.seq,) = _get_struct_I().unpack(str[start:end])
        _v233 = _v232.stamp
        _x = _v233
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v232.frame_id = str[start:end].decode('utf-8')
        else:
          _v232.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v234 = val1.target_point_offset
        _x = _v234
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v235 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v235.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v235.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v235.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v236 = val3.position
          _x = _v236
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v237 = val3.orientation
          _x = _v237
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v235.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v235.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v235.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v235.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v238 = val3.position
          _x = _v238
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v239 = val3.orientation
          _x = _v239
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v235.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.request.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v240 = val1.header
        start = end
        end += 4
        (_v240.seq,) = _get_struct_I().unpack(str[start:end])
        _v241 = _v240.stamp
        _x = _v241
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v240.frame_id = str[start:end].decode('utf-8')
        else:
          _v240.frame_id = str[start:end]
        _v242 = val1.orientation
        _x = _v242
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.request.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _get_struct_d().unpack(str[start:end])
        _v243 = val1.target_pose
        _v244 = _v243.header
        start = end
        end += 4
        (_v244.seq,) = _get_struct_I().unpack(str[start:end])
        _v245 = _v244.stamp
        _x = _v245
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v244.frame_id = str[start:end].decode('utf-8')
        else:
          _v244.frame_id = str[start:end]
        _v246 = _v243.pose
        _v247 = _v246.position
        _x = _v247
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v248 = _v246.orientation
        _x = _v248
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _get_struct_i().unpack(str[start:end])
        _v249 = val1.sensor_pose
        _v250 = _v249.header
        start = end
        end += 4
        (_v250.seq,) = _get_struct_I().unpack(str[start:end])
        _v251 = _v250.stamp
        _x = _v251
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v250.frame_id = str[start:end].decode('utf-8')
        else:
          _v250.frame_id = str[start:end]
        _v252 = _v249.pose
        _v253 = _v252.position
        _x = _v253
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v254 = _v252.orientation
        _x = _v254
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
        self.action_goal.goal.request.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.trajectory_constraints.constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v255 = val2.header
          start = end
          end += 4
          (_v255.seq,) = _get_struct_I().unpack(str[start:end])
          _v256 = _v255.stamp
          _x = _v256
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v255.frame_id = str[start:end].decode('utf-8')
          else:
            _v255.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v257 = val2.target_point_offset
          _x = _v257
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v258 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v258.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = struct.unpack(pattern, str[start:end])
            _v258.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v258.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v259 = val4.position
            _x = _v259
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v260 = val4.orientation
            _x = _v260
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v258.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v258.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v258.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v258.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v261 = val4.position
            _x = _v261
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v262 = val4.orientation
            _x = _v262
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v258.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v263 = val2.header
          start = end
          end += 4
          (_v263.seq,) = _get_struct_I().unpack(str[start:end])
          _v264 = _v263.stamp
          _x = _v264
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v263.frame_id = str[start:end].decode('utf-8')
          else:
            _v263.frame_id = str[start:end]
          _v265 = val2.orientation
          _x = _v265
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v266 = val2.target_pose
          _v267 = _v266.header
          start = end
          end += 4
          (_v267.seq,) = _get_struct_I().unpack(str[start:end])
          _v268 = _v267.stamp
          _x = _v268
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v267.frame_id = str[start:end].decode('utf-8')
          else:
            _v267.frame_id = str[start:end]
          _v269 = _v266.pose
          _v270 = _v269.position
          _x = _v270
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v271 = _v269.orientation
          _x = _v271
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v272 = val2.sensor_pose
          _v273 = _v272.header
          start = end
          end += 4
          (_v273.seq,) = _get_struct_I().unpack(str[start:end])
          _v274 = _v273.stamp
          _x = _v274
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v273.frame_id = str[start:end].decode('utf-8')
          else:
            _v273.frame_id = str[start:end]
          _v275 = _v272.pose
          _v276 = _v275.position
          _x = _v276
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v277 = _v275.orientation
          _x = _v277
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.action_goal.goal.request.trajectory_constraints.constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.reference_trajectories = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.GenericTrajectory()
        _v278 = val1.header
        start = end
        end += 4
        (_v278.seq,) = _get_struct_I().unpack(str[start:end])
        _v279 = _v278.stamp
        _x = _v279
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v278.frame_id = str[start:end].decode('utf-8')
        else:
          _v278.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_trajectory = []
        for i in range(0, length):
          val2 = trajectory_msgs.msg.JointTrajectory()
          _v280 = val2.header
          start = end
          end += 4
          (_v280.seq,) = _get_struct_I().unpack(str[start:end])
          _v281 = _v280.stamp
          _x = _v281
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v280.frame_id = str[start:end].decode('utf-8')
          else:
            _v280.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.joint_names.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.effort = struct.unpack(pattern, str[start:end])
            _v282 = val3.time_from_start
            _x = _v282
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.joint_trajectory.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.cartesian_trajectory = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.CartesianTrajectory()
          _v283 = val2.header
          start = end
          end += 4
          (_v283.seq,) = _get_struct_I().unpack(str[start:end])
          _v284 = _v283.stamp
          _x = _v284
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v283.frame_id = str[start:end].decode('utf-8')
          else:
            _v283.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.tracked_frame = str[start:end].decode('utf-8')
          else:
            val2.tracked_frame = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = moveit_msgs.msg.CartesianTrajectoryPoint()
            _v285 = val3.point
            _v286 = _v285.pose
            _v287 = _v286.position
            _x = _v287
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v288 = _v286.orientation
            _x = _v288
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v289 = _v285.velocity
            _v290 = _v289.linear
            _x = _v290
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v291 = _v289.angular
            _x = _v291
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v292 = _v285.acceleration
            _v293 = _v292.linear
            _x = _v293
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v294 = _v292.angular
            _x = _v294
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v295 = val3.time_from_start
            _x = _v295
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.cartesian_trajectory.append(val2)
        self.action_goal.goal.request.reference_trajectories.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.planner_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.group_name = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.group_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.action_goal.goal.request.num_planning_attempts, _x.action_goal.goal.request.allowed_planning_time, _x.action_goal.goal.request.max_velocity_scaling_factor, _x.action_goal.goal.request.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v296 = val1.translation
        _x = _v296
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v297 = val1.rotation
        _x = _v297
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v298 = val1.linear
        _x = _v298
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v299 = val1.angular
        _x = _v299
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v300 = val1.force
        _x = _v300
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v301 = val1.torque
        _x = _v301
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v302 = val1.object
        _v303 = _v302.header
        start = end
        end += 4
        (_v303.seq,) = _get_struct_I().unpack(str[start:end])
        _v304 = _v303.stamp
        _x = _v304
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v303.frame_id = str[start:end].decode('utf-8')
        else:
          _v303.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v302.id = str[start:end].decode('utf-8')
        else:
          _v302.id = str[start:end]
        _v305 = _v302.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v305.key = str[start:end].decode('utf-8')
        else:
          _v305.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v305.db = str[start:end].decode('utf-8')
        else:
          _v305.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v302.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v302.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v302.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v306 = val3.position
          _x = _v306
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v307 = val3.orientation
          _x = _v307
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v302.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v302.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v302.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v302.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v308 = val3.position
          _x = _v308
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v309 = val3.orientation
          _x = _v309
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v302.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v302.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v302.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v302.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v310 = val3.position
          _x = _v310
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v311 = val3.orientation
          _x = _v311
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v302.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v302.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v302.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v302.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v312 = val3.position
          _x = _v312
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v313 = val3.orientation
          _x = _v313
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v302.subframe_poses.append(val3)
        start = end
        end += 1
        (_v302.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v314 = val1.detach_posture
        _v315 = _v314.header
        start = end
        end += 4
        (_v315.seq,) = _get_struct_I().unpack(str[start:end])
        _v316 = _v315.stamp
        _x = _v316
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v315.frame_id = str[start:end].decode('utf-8')
        else:
          _v315.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v314.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v314.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v314.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v317 = val3.time_from_start
          _x = _v317
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v314.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v318 = val1.header
        start = end
        end += 4
        (_v318.seq,) = _get_struct_I().unpack(str[start:end])
        _v319 = _v318.stamp
        _x = _v319
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v318.frame_id = str[start:end].decode('utf-8')
        else:
          _v318.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v320 = val1.transform
        _v321 = _v320.translation
        _x = _v321
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v322 = _v320.rotation
        _x = _v322
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.enabled = struct.unpack(pattern, str[start:end])
        val1.enabled = list(map(bool, val1.enabled))
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = struct.unpack(pattern, str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = list(map(bool, self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v323 = val1.color
        _x = _v323
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v324 = val1.header
        start = end
        end += 4
        (_v324.seq,) = _get_struct_I().unpack(str[start:end])
        _v325 = _v324.stamp
        _x = _v325
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v324.frame_id = str[start:end].decode('utf-8')
        else:
          _v324.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v326 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v326.key = str[start:end].decode('utf-8')
        else:
          _v326.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v326.db = str[start:end].decode('utf-8')
        else:
          _v326.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = struct.unpack(pattern, str[start:end])
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v327 = val2.position
          _x = _v327
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v328 = val2.orientation
          _x = _v328
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v329 = val2.position
          _x = _v329
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v330 = val2.orientation
          _x = _v330
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = _get_struct_4d().unpack(str[start:end])
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v331 = val2.position
          _x = _v331
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v332 = val2.orientation
          _x = _v332
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v333 = val2.position
          _x = _v333
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v334 = val2.orientation
          _x = _v334
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 40
      (_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3BidBid3I().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.is_diff)
      self.action_goal.goal.planning_options.plan_only = bool(self.action_goal.goal.planning_options.plan_only)
      self.action_goal.goal.planning_options.look_around = bool(self.action_goal.goal.planning_options.look_around)
      self.action_goal.goal.planning_options.replan = bool(self.action_goal.goal.planning_options.replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.action_result.result.error_code.val, _x.action_result.result.trajectory_start.joint_state.header.seq, _x.action_result.result.trajectory_start.joint_state.header.stamp.secs, _x.action_result.result.trajectory_start.joint_state.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.trajectory_start.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.trajectory_start.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.trajectory_start.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_start.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_start.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_start.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.action_result.result.trajectory_start.multi_dof_joint_state.header.seq, _x.action_result.result.trajectory_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.trajectory_start.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.trajectory_start.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.trajectory_start.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.trajectory_start.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v335 = val1.translation
        _x = _v335
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v336 = val1.rotation
        _x = _v336
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_result.result.trajectory_start.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v337 = val1.linear
        _x = _v337
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v338 = val1.angular
        _x = _v338
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.trajectory_start.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v339 = val1.force
        _x = _v339
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v340 = val1.torque
        _x = _v340
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.trajectory_start.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v341 = val1.object
        _v342 = _v341.header
        start = end
        end += 4
        (_v342.seq,) = _get_struct_I().unpack(str[start:end])
        _v343 = _v342.stamp
        _x = _v343
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v342.frame_id = str[start:end].decode('utf-8')
        else:
          _v342.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v341.id = str[start:end].decode('utf-8')
        else:
          _v341.id = str[start:end]
        _v344 = _v341.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v344.key = str[start:end].decode('utf-8')
        else:
          _v344.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v344.db = str[start:end].decode('utf-8')
        else:
          _v344.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v341.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v341.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v341.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v345 = val3.position
          _x = _v345
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v346 = val3.orientation
          _x = _v346
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v341.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v341.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v341.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v341.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v347 = val3.position
          _x = _v347
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v348 = val3.orientation
          _x = _v348
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v341.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v341.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v341.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v341.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v349 = val3.position
          _x = _v349
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v350 = val3.orientation
          _x = _v350
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v341.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v341.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v341.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v341.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v351 = val3.position
          _x = _v351
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v352 = val3.orientation
          _x = _v352
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v341.subframe_poses.append(val3)
        start = end
        end += 1
        (_v341.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v353 = val1.detach_posture
        _v354 = _v353.header
        start = end
        end += 4
        (_v354.seq,) = _get_struct_I().unpack(str[start:end])
        _v355 = _v354.stamp
        _x = _v355
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v354.frame_id = str[start:end].decode('utf-8')
        else:
          _v354.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v353.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v353.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v353.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v356 = val3.time_from_start
          _x = _v356
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v353.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_result.result.trajectory_start.attached_collision_objects.append(val1)
      _x = self
      start = end
      end += 13
      (_x.action_result.result.trajectory_start.is_diff, _x.action_result.result.planned_trajectory.joint_trajectory.header.seq, _x.action_result.result.planned_trajectory.joint_trajectory.header.stamp.secs, _x.action_result.result.planned_trajectory.joint_trajectory.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.action_result.result.trajectory_start.is_diff = bool(self.action_result.result.trajectory_start.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.planned_trajectory.joint_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.planned_trajectory.joint_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.planned_trajectory.joint_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.planned_trajectory.joint_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.planned_trajectory.joint_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = struct.unpack(pattern, str[start:end])
        _v357 = val1.time_from_start
        _x = _v357
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.action_result.result.planned_trajectory.joint_trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.seq, _x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.stamp.secs, _x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.transforms = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Transform()
          _v358 = val2.translation
          _x = _v358
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v359 = val2.rotation
          _x = _v359
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.transforms.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.velocities = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Twist()
          _v360 = val2.linear
          _x = _v360
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v361 = val2.angular
          _x = _v361
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.velocities.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.accelerations = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Twist()
          _v362 = val2.linear
          _x = _v362
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v363 = val2.angular
          _x = _v363
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.accelerations.append(val2)
        _v364 = val1.time_from_start
        _x = _v364
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.executed_trajectory.joint_trajectory.header.seq, _x.action_result.result.executed_trajectory.joint_trajectory.header.stamp.secs, _x.action_result.result.executed_trajectory.joint_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_trajectory.joint_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_trajectory.joint_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_trajectory.joint_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.executed_trajectory.joint_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_trajectory.joint_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = struct.unpack(pattern, str[start:end])
        _v365 = val1.time_from_start
        _x = _v365
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.action_result.result.executed_trajectory.joint_trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.seq, _x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.stamp.secs, _x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.transforms = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Transform()
          _v366 = val2.translation
          _x = _v366
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v367 = val2.rotation
          _x = _v367
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.transforms.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.velocities = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Twist()
          _v368 = val2.linear
          _x = _v368
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v369 = val2.angular
          _x = _v369
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.velocities.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.accelerations = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Twist()
          _v370 = val2.linear
          _x = _v370
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v371 = val2.angular
          _x = _v371
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.accelerations.append(val2)
        _v372 = val1.time_from_start
        _x = _v372
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.points.append(val1)
      _x = self
      start = end
      end += 20
      (_x.action_result.result.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.state = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.request.workspace_parameters.header.seq, _x.action_goal.goal.request.workspace_parameters.header.stamp.secs, _x.action_goal.goal.request.workspace_parameters.header.stamp.nsecs))
      _x = self.action_goal.goal.request.workspace_parameters.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d3I().pack(_x.action_goal.goal.request.workspace_parameters.min_corner.x, _x.action_goal.goal.request.workspace_parameters.min_corner.y, _x.action_goal.goal.request.workspace_parameters.min_corner.z, _x.action_goal.goal.request.workspace_parameters.max_corner.x, _x.action_goal.goal.request.workspace_parameters.max_corner.y, _x.action_goal.goal.request.workspace_parameters.max_corner.z, _x.action_goal.goal.request.start_state.joint_state.header.seq, _x.action_goal.goal.request.start_state.joint_state.header.stamp.secs, _x.action_goal.goal.request.start_state.joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.request.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.request.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.request.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.request.start_state.joint_state.position.tostring())
      length = len(self.action_goal.goal.request.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.request.start_state.joint_state.velocity.tostring())
      length = len(self.action_goal.goal.request.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.request.start_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.request.start_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.request.start_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.request.start_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.request.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.request.start_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.multi_dof_joint_state.transforms:
        _v373 = val1.translation
        _x = _v373
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v374 = val1.rotation
        _x = _v374
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.request.start_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.multi_dof_joint_state.twist:
        _v375 = val1.linear
        _x = _v375
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v376 = val1.angular
        _x = _v376
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.request.start_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.multi_dof_joint_state.wrench:
        _v377 = val1.force
        _x = _v377
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v378 = val1.torque
        _x = _v378
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.request.start_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.start_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v379 = val1.object
        _v380 = _v379.header
        buff.write(_get_struct_I().pack(_v380.seq))
        _v381 = _v380.stamp
        _x = _v381
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v380.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v379.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v382 = _v379.type
        _x = _v382.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v382.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v379.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v379.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v379.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v379.primitive_poses:
          _v383 = val3.position
          _x = _v383
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v384 = val3.orientation
          _x = _v384
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v379.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v379.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v379.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v379.mesh_poses:
          _v385 = val3.position
          _x = _v385
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v386 = val3.orientation
          _x = _v386
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v379.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v379.planes:
          buff.write(val3.coef.tostring())
        length = len(_v379.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v379.plane_poses:
          _v387 = val3.position
          _x = _v387
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v388 = val3.orientation
          _x = _v388
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v379.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v379.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v379.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v379.subframe_poses:
          _v389 = val3.position
          _x = _v389
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v390 = val3.orientation
          _x = _v390
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v379.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v391 = val1.detach_posture
        _v392 = _v391.header
        buff.write(_get_struct_I().pack(_v392.seq))
        _v393 = _v392.stamp
        _x = _v393
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v392.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v391.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v391.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v391.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v391.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v394 = val3.time_from_start
          _x = _v394
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      buff.write(_get_struct_B().pack(self.action_goal.goal.request.start_state.is_diff))
      length = len(self.action_goal.goal.request.goal_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.goal_constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v395 = val2.header
          buff.write(_get_struct_I().pack(_v395.seq))
          _v396 = _v395.stamp
          _x = _v396
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v395.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v397 = val2.target_point_offset
          _x = _v397
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v398 = val2.constraint_region
          length = len(_v398.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v398.primitives:
            buff.write(_get_struct_B().pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.dimensions.tostring())
          length = len(_v398.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v398.primitive_poses:
            _v399 = val4.position
            _x = _v399
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v400 = val4.orientation
            _x = _v400
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v398.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v398.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(val5.vertex_indices.tostring())
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v398.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v398.mesh_poses:
            _v401 = val4.position
            _x = _v401
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v402 = val4.orientation
            _x = _v402
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_d().pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v403 = val2.header
          buff.write(_get_struct_I().pack(_v403.seq))
          _v404 = _v403.stamp
          _x = _v404
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v403.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v405 = val2.orientation
          _x = _v405
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_get_struct_d().pack(val2.target_radius))
          _v406 = val2.target_pose
          _v407 = _v406.header
          buff.write(_get_struct_I().pack(_v407.seq))
          _v408 = _v407.stamp
          _x = _v408
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v407.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v409 = _v406.pose
          _v410 = _v409.position
          _x = _v410
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v411 = _v409.orientation
          _x = _v411
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_i().pack(val2.cone_sides))
          _v412 = val2.sensor_pose
          _v413 = _v412.header
          buff.write(_get_struct_I().pack(_v413.seq))
          _v414 = _v413.stamp
          _x = _v414
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v413.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v415 = _v412.pose
          _v416 = _v415.position
          _x = _v416
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v417 = _v415.orientation
          _x = _v417
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.action_goal.goal.request.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.request.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.action_goal.goal.request.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.path_constraints.position_constraints:
        _v418 = val1.header
        buff.write(_get_struct_I().pack(_v418.seq))
        _v419 = _v418.stamp
        _x = _v419
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v418.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v420 = val1.target_point_offset
        _x = _v420
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v421 = val1.constraint_region
        length = len(_v421.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v421.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v421.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v421.primitive_poses:
          _v422 = val3.position
          _x = _v422
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v423 = val3.orientation
          _x = _v423
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v421.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v421.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v421.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v421.mesh_poses:
          _v424 = val3.position
          _x = _v424
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v425 = val3.orientation
          _x = _v425
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_d().pack(val1.weight))
      length = len(self.action_goal.goal.request.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.path_constraints.orientation_constraints:
        _v426 = val1.header
        buff.write(_get_struct_I().pack(_v426.seq))
        _v427 = _v426.stamp
        _x = _v427
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v426.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v428 = val1.orientation
        _x = _v428
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
      length = len(self.action_goal.goal.request.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.path_constraints.visibility_constraints:
        buff.write(_get_struct_d().pack(val1.target_radius))
        _v429 = val1.target_pose
        _v430 = _v429.header
        buff.write(_get_struct_I().pack(_v430.seq))
        _v431 = _v430.stamp
        _x = _v431
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v430.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v432 = _v429.pose
        _v433 = _v432.position
        _x = _v433
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v434 = _v432.orientation
        _x = _v434
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_i().pack(val1.cone_sides))
        _v435 = val1.sensor_pose
        _v436 = _v435.header
        buff.write(_get_struct_I().pack(_v436.seq))
        _v437 = _v436.stamp
        _x = _v437
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v436.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v438 = _v435.pose
        _v439 = _v438.position
        _x = _v439
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v440 = _v438.orientation
        _x = _v440
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.action_goal.goal.request.trajectory_constraints.constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.trajectory_constraints.constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v441 = val2.header
          buff.write(_get_struct_I().pack(_v441.seq))
          _v442 = _v441.stamp
          _x = _v442
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v441.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v443 = val2.target_point_offset
          _x = _v443
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v444 = val2.constraint_region
          length = len(_v444.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v444.primitives:
            buff.write(_get_struct_B().pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.dimensions.tostring())
          length = len(_v444.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v444.primitive_poses:
            _v445 = val4.position
            _x = _v445
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v446 = val4.orientation
            _x = _v446
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v444.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v444.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(val5.vertex_indices.tostring())
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v444.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v444.mesh_poses:
            _v447 = val4.position
            _x = _v447
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v448 = val4.orientation
            _x = _v448
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_d().pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v449 = val2.header
          buff.write(_get_struct_I().pack(_v449.seq))
          _v450 = _v449.stamp
          _x = _v450
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v449.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v451 = val2.orientation
          _x = _v451
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_get_struct_d().pack(val2.target_radius))
          _v452 = val2.target_pose
          _v453 = _v452.header
          buff.write(_get_struct_I().pack(_v453.seq))
          _v454 = _v453.stamp
          _x = _v454
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v453.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v455 = _v452.pose
          _v456 = _v455.position
          _x = _v456
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v457 = _v455.orientation
          _x = _v457
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_i().pack(val2.cone_sides))
          _v458 = val2.sensor_pose
          _v459 = _v458.header
          buff.write(_get_struct_I().pack(_v459.seq))
          _v460 = _v459.stamp
          _x = _v460
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v459.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v461 = _v458.pose
          _v462 = _v461.position
          _x = _v462
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v463 = _v461.orientation
          _x = _v463
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.action_goal.goal.request.reference_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.reference_trajectories:
        _v464 = val1.header
        buff.write(_get_struct_I().pack(_v464.seq))
        _v465 = _v464.stamp
        _x = _v465
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v464.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_trajectory:
          _v466 = val2.header
          buff.write(_get_struct_I().pack(_v466.seq))
          _v467 = _v466.stamp
          _x = _v467
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v466.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.joint_names)
          buff.write(_struct_I.pack(length))
          for val3 in val2.joint_names:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.pack('<I%ss'%length, length, val3))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.positions.tostring())
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.velocities.tostring())
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.accelerations.tostring())
            length = len(val3.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.effort.tostring())
            _v468 = val3.time_from_start
            _x = _v468
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.cartesian_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.cartesian_trajectory:
          _v469 = val2.header
          buff.write(_get_struct_I().pack(_v469.seq))
          _v470 = _v469.stamp
          _x = _v470
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v469.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.tracked_frame
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _v471 = val3.point
            _v472 = _v471.pose
            _v473 = _v472.position
            _x = _v473
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v474 = _v472.orientation
            _x = _v474
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _v475 = _v471.velocity
            _v476 = _v475.linear
            _x = _v476
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v477 = _v475.angular
            _x = _v477
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v478 = _v471.acceleration
            _v479 = _v478.linear
            _x = _v479
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v480 = _v478.angular
            _x = _v480
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v481 = val3.time_from_start
            _x = _v481
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self.action_goal.goal.request.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.request.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.action_goal.goal.request.num_planning_attempts, _x.action_goal.goal.request.allowed_planning_time, _x.action_goal.goal.request.max_velocity_scaling_factor, _x.action_goal.goal.request.max_acceleration_scaling_factor))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v482 = val1.translation
        _x = _v482
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v483 = val1.rotation
        _x = _v483
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v484 = val1.linear
        _x = _v484
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v485 = val1.angular
        _x = _v485
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v486 = val1.force
        _x = _v486
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v487 = val1.torque
        _x = _v487
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v488 = val1.object
        _v489 = _v488.header
        buff.write(_get_struct_I().pack(_v489.seq))
        _v490 = _v489.stamp
        _x = _v490
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v489.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v488.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v491 = _v488.type
        _x = _v491.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v491.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v488.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v488.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v488.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v488.primitive_poses:
          _v492 = val3.position
          _x = _v492
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v493 = val3.orientation
          _x = _v493
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v488.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v488.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v488.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v488.mesh_poses:
          _v494 = val3.position
          _x = _v494
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v495 = val3.orientation
          _x = _v495
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v488.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v488.planes:
          buff.write(val3.coef.tostring())
        length = len(_v488.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v488.plane_poses:
          _v496 = val3.position
          _x = _v496
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v497 = val3.orientation
          _x = _v497
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v488.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v488.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v488.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v488.subframe_poses:
          _v498 = val3.position
          _x = _v498
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v499 = val3.orientation
          _x = _v499
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v488.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v500 = val1.detach_posture
        _v501 = _v500.header
        buff.write(_get_struct_I().pack(_v501.seq))
        _v502 = _v501.stamp
        _x = _v502
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v501.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v500.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v500.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v500.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v500.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v503 = val3.time_from_start
          _x = _v503
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      buff.write(_get_struct_B().pack(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v504 = val1.header
        buff.write(_get_struct_I().pack(_v504.seq))
        _v505 = _v504.stamp
        _x = _v505
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v504.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v506 = val1.transform
        _v507 = _v506.translation
        _x = _v507
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v508 = _v506.rotation
        _x = _v508
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.enabled.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.padding))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.scale))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v509 = val1.color
        _x = _v509
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects:
        _v510 = val1.header
        buff.write(_get_struct_I().pack(_v510.seq))
        _v511 = _v510.stamp
        _x = _v511
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v510.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v512 = val1.type
        _x = _v512.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v512.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_get_struct_B().pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.dimensions.tostring())
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v513 = val2.position
          _x = _v513
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v514 = val2.orientation
          _x = _v514
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(val3.vertex_indices.tostring())
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v515 = val2.position
          _x = _v515
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v516 = val2.orientation
          _x = _v516
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(val2.coef.tostring())
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v517 = val2.position
          _x = _v517
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v518 = val2.orientation
          _x = _v518
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v519 = val2.position
          _x = _v519
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v520 = val2.orientation
          _x = _v520
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(val1.operation))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data.tostring())
      _x = self
      buff.write(_get_struct_3BidBid3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.action_result.result.error_code.val, _x.action_result.result.trajectory_start.joint_state.header.seq, _x.action_result.result.trajectory_start.joint_state.header.stamp.secs, _x.action_result.result.trajectory_start.joint_state.header.stamp.nsecs))
      _x = self.action_result.result.trajectory_start.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.trajectory_start.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.trajectory_start.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.trajectory_start.joint_state.position.tostring())
      length = len(self.action_result.result.trajectory_start.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.trajectory_start.joint_state.velocity.tostring())
      length = len(self.action_result.result.trajectory_start.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.trajectory_start.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.trajectory_start.multi_dof_joint_state.header.seq, _x.action_result.result.trajectory_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.trajectory_start.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_result.result.trajectory_start.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.trajectory_start.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.trajectory_start.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.multi_dof_joint_state.transforms:
        _v521 = val1.translation
        _x = _v521
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v522 = val1.rotation
        _x = _v522
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_result.result.trajectory_start.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.multi_dof_joint_state.twist:
        _v523 = val1.linear
        _x = _v523
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v524 = val1.angular
        _x = _v524
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.trajectory_start.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.multi_dof_joint_state.wrench:
        _v525 = val1.force
        _x = _v525
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v526 = val1.torque
        _x = _v526
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.trajectory_start.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.trajectory_start.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v527 = val1.object
        _v528 = _v527.header
        buff.write(_get_struct_I().pack(_v528.seq))
        _v529 = _v528.stamp
        _x = _v529
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v528.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v527.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v530 = _v527.type
        _x = _v530.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v530.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v527.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v527.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v527.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v527.primitive_poses:
          _v531 = val3.position
          _x = _v531
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v532 = val3.orientation
          _x = _v532
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v527.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v527.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v527.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v527.mesh_poses:
          _v533 = val3.position
          _x = _v533
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v534 = val3.orientation
          _x = _v534
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v527.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v527.planes:
          buff.write(val3.coef.tostring())
        length = len(_v527.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v527.plane_poses:
          _v535 = val3.position
          _x = _v535
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v536 = val3.orientation
          _x = _v536
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v527.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v527.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v527.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v527.subframe_poses:
          _v537 = val3.position
          _x = _v537
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v538 = val3.orientation
          _x = _v538
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v527.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v539 = val1.detach_posture
        _v540 = _v539.header
        buff.write(_get_struct_I().pack(_v540.seq))
        _v541 = _v540.stamp
        _x = _v541
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v540.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v539.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v539.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v539.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v539.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v542 = val3.time_from_start
          _x = _v542
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_result.result.trajectory_start.is_diff, _x.action_result.result.planned_trajectory.joint_trajectory.header.seq, _x.action_result.result.planned_trajectory.joint_trajectory.header.stamp.secs, _x.action_result.result.planned_trajectory.joint_trajectory.header.stamp.nsecs))
      _x = self.action_result.result.planned_trajectory.joint_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.planned_trajectory.joint_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.planned_trajectory.joint_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.planned_trajectory.joint_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.planned_trajectory.joint_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v543 = val1.time_from_start
        _x = _v543
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.seq, _x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.stamp.secs, _x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.stamp.nsecs))
      _x = self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.points:
        length = len(val1.transforms)
        buff.write(_struct_I.pack(length))
        for val2 in val1.transforms:
          _v544 = val2.translation
          _x = _v544
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v545 = val2.rotation
          _x = _v545
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        for val2 in val1.velocities:
          _v546 = val2.linear
          _x = _v546
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v547 = val2.angular
          _x = _v547
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.accelerations:
          _v548 = val2.linear
          _x = _v548
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v549 = val2.angular
          _x = _v549
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v550 = val1.time_from_start
        _x = _v550
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.executed_trajectory.joint_trajectory.header.seq, _x.action_result.result.executed_trajectory.joint_trajectory.header.stamp.secs, _x.action_result.result.executed_trajectory.joint_trajectory.header.stamp.nsecs))
      _x = self.action_result.result.executed_trajectory.joint_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.executed_trajectory.joint_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_trajectory.joint_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.executed_trajectory.joint_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_trajectory.joint_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v551 = val1.time_from_start
        _x = _v551
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.seq, _x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.stamp.secs, _x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.stamp.nsecs))
      _x = self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.points:
        length = len(val1.transforms)
        buff.write(_struct_I.pack(length))
        for val2 in val1.transforms:
          _v552 = val2.translation
          _x = _v552
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v553 = val2.rotation
          _x = _v553
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        for val2 in val1.velocities:
          _v554 = val2.linear
          _x = _v554
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v555 = val2.angular
          _x = _v555
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        for val2 in val1.accelerations:
          _v556 = val2.linear
          _x = _v556
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v557 = val2.angular
          _x = _v557
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v558 = val1.time_from_start
        _x = _v558
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.action_result.result.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = moveit_msgs.msg.MoveGroupActionGoal()
      if self.action_result is None:
        self.action_result = moveit_msgs.msg.MoveGroupActionResult()
      if self.action_feedback is None:
        self.action_feedback = moveit_msgs.msg.MoveGroupActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.request.workspace_parameters.header.seq, _x.action_goal.goal.request.workspace_parameters.header.stamp.secs, _x.action_goal.goal.request.workspace_parameters.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.workspace_parameters.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.workspace_parameters.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.action_goal.goal.request.workspace_parameters.min_corner.x, _x.action_goal.goal.request.workspace_parameters.min_corner.y, _x.action_goal.goal.request.workspace_parameters.min_corner.z, _x.action_goal.goal.request.workspace_parameters.max_corner.x, _x.action_goal.goal.request.workspace_parameters.max_corner.y, _x.action_goal.goal.request.workspace_parameters.max_corner.z, _x.action_goal.goal.request.start_state.joint_state.header.seq, _x.action_goal.goal.request.start_state.joint_state.header.stamp.secs, _x.action_goal.goal.request.start_state.joint_state.header.stamp.nsecs,) = _get_struct_6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.request.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.request.start_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.request.start_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.request.start_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.request.start_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.request.start_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.request.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v559 = val1.translation
        _x = _v559
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v560 = val1.rotation
        _x = _v560
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.request.start_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v561 = val1.linear
        _x = _v561
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v562 = val1.angular
        _x = _v562
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.request.start_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v563 = val1.force
        _x = _v563
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v564 = val1.torque
        _x = _v564
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.request.start_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.start_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v565 = val1.object
        _v566 = _v565.header
        start = end
        end += 4
        (_v566.seq,) = _get_struct_I().unpack(str[start:end])
        _v567 = _v566.stamp
        _x = _v567
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v566.frame_id = str[start:end].decode('utf-8')
        else:
          _v566.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v565.id = str[start:end].decode('utf-8')
        else:
          _v565.id = str[start:end]
        _v568 = _v565.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v568.key = str[start:end].decode('utf-8')
        else:
          _v568.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v568.db = str[start:end].decode('utf-8')
        else:
          _v568.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v565.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v565.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v565.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v569 = val3.position
          _x = _v569
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v570 = val3.orientation
          _x = _v570
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v565.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v565.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v565.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v565.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v571 = val3.position
          _x = _v571
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v572 = val3.orientation
          _x = _v572
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v565.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v565.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v565.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v565.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v573 = val3.position
          _x = _v573
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v574 = val3.orientation
          _x = _v574
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v565.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v565.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v565.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v565.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v575 = val3.position
          _x = _v575
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v576 = val3.orientation
          _x = _v576
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v565.subframe_poses.append(val3)
        start = end
        end += 1
        (_v565.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v577 = val1.detach_posture
        _v578 = _v577.header
        start = end
        end += 4
        (_v578.seq,) = _get_struct_I().unpack(str[start:end])
        _v579 = _v578.stamp
        _x = _v579
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v578.frame_id = str[start:end].decode('utf-8')
        else:
          _v578.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v577.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v577.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v577.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v580 = val3.time_from_start
          _x = _v580
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v577.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.request.start_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_goal.goal.request.start_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.request.start_state.is_diff = bool(self.action_goal.goal.request.start_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.goal_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v581 = val2.header
          start = end
          end += 4
          (_v581.seq,) = _get_struct_I().unpack(str[start:end])
          _v582 = _v581.stamp
          _x = _v582
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v581.frame_id = str[start:end].decode('utf-8')
          else:
            _v581.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v583 = val2.target_point_offset
          _x = _v583
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v584 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v584.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v584.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v584.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v585 = val4.position
            _x = _v585
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v586 = val4.orientation
            _x = _v586
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v584.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v584.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v584.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v584.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v587 = val4.position
            _x = _v587
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v588 = val4.orientation
            _x = _v588
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v584.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v589 = val2.header
          start = end
          end += 4
          (_v589.seq,) = _get_struct_I().unpack(str[start:end])
          _v590 = _v589.stamp
          _x = _v590
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v589.frame_id = str[start:end].decode('utf-8')
          else:
            _v589.frame_id = str[start:end]
          _v591 = val2.orientation
          _x = _v591
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v592 = val2.target_pose
          _v593 = _v592.header
          start = end
          end += 4
          (_v593.seq,) = _get_struct_I().unpack(str[start:end])
          _v594 = _v593.stamp
          _x = _v594
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v593.frame_id = str[start:end].decode('utf-8')
          else:
            _v593.frame_id = str[start:end]
          _v595 = _v592.pose
          _v596 = _v595.position
          _x = _v596
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v597 = _v595.orientation
          _x = _v597
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v598 = val2.sensor_pose
          _v599 = _v598.header
          start = end
          end += 4
          (_v599.seq,) = _get_struct_I().unpack(str[start:end])
          _v600 = _v599.stamp
          _x = _v600
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v599.frame_id = str[start:end].decode('utf-8')
          else:
            _v599.frame_id = str[start:end]
          _v601 = _v598.pose
          _v602 = _v601.position
          _x = _v602
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v603 = _v601.orientation
          _x = _v603
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.action_goal.goal.request.goal_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.path_constraints.name = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.request.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v604 = val1.header
        start = end
        end += 4
        (_v604.seq,) = _get_struct_I().unpack(str[start:end])
        _v605 = _v604.stamp
        _x = _v605
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v604.frame_id = str[start:end].decode('utf-8')
        else:
          _v604.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v606 = val1.target_point_offset
        _x = _v606
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v607 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v607.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v607.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v607.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v608 = val3.position
          _x = _v608
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v609 = val3.orientation
          _x = _v609
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v607.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v607.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v607.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v607.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v610 = val3.position
          _x = _v610
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v611 = val3.orientation
          _x = _v611
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v607.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.request.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v612 = val1.header
        start = end
        end += 4
        (_v612.seq,) = _get_struct_I().unpack(str[start:end])
        _v613 = _v612.stamp
        _x = _v613
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v612.frame_id = str[start:end].decode('utf-8')
        else:
          _v612.frame_id = str[start:end]
        _v614 = val1.orientation
        _x = _v614
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.request.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _get_struct_d().unpack(str[start:end])
        _v615 = val1.target_pose
        _v616 = _v615.header
        start = end
        end += 4
        (_v616.seq,) = _get_struct_I().unpack(str[start:end])
        _v617 = _v616.stamp
        _x = _v617
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v616.frame_id = str[start:end].decode('utf-8')
        else:
          _v616.frame_id = str[start:end]
        _v618 = _v615.pose
        _v619 = _v618.position
        _x = _v619
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v620 = _v618.orientation
        _x = _v620
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _get_struct_i().unpack(str[start:end])
        _v621 = val1.sensor_pose
        _v622 = _v621.header
        start = end
        end += 4
        (_v622.seq,) = _get_struct_I().unpack(str[start:end])
        _v623 = _v622.stamp
        _x = _v623
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v622.frame_id = str[start:end].decode('utf-8')
        else:
          _v622.frame_id = str[start:end]
        _v624 = _v621.pose
        _v625 = _v624.position
        _x = _v625
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v626 = _v624.orientation
        _x = _v626
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
        self.action_goal.goal.request.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.trajectory_constraints.constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v627 = val2.header
          start = end
          end += 4
          (_v627.seq,) = _get_struct_I().unpack(str[start:end])
          _v628 = _v627.stamp
          _x = _v628
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v627.frame_id = str[start:end].decode('utf-8')
          else:
            _v627.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v629 = val2.target_point_offset
          _x = _v629
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v630 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v630.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v630.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v630.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v631 = val4.position
            _x = _v631
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v632 = val4.orientation
            _x = _v632
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v630.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v630.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v630.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v630.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v633 = val4.position
            _x = _v633
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v634 = val4.orientation
            _x = _v634
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v630.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v635 = val2.header
          start = end
          end += 4
          (_v635.seq,) = _get_struct_I().unpack(str[start:end])
          _v636 = _v635.stamp
          _x = _v636
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v635.frame_id = str[start:end].decode('utf-8')
          else:
            _v635.frame_id = str[start:end]
          _v637 = val2.orientation
          _x = _v637
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v638 = val2.target_pose
          _v639 = _v638.header
          start = end
          end += 4
          (_v639.seq,) = _get_struct_I().unpack(str[start:end])
          _v640 = _v639.stamp
          _x = _v640
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v639.frame_id = str[start:end].decode('utf-8')
          else:
            _v639.frame_id = str[start:end]
          _v641 = _v638.pose
          _v642 = _v641.position
          _x = _v642
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v643 = _v641.orientation
          _x = _v643
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v644 = val2.sensor_pose
          _v645 = _v644.header
          start = end
          end += 4
          (_v645.seq,) = _get_struct_I().unpack(str[start:end])
          _v646 = _v645.stamp
          _x = _v646
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v645.frame_id = str[start:end].decode('utf-8')
          else:
            _v645.frame_id = str[start:end]
          _v647 = _v644.pose
          _v648 = _v647.position
          _x = _v648
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v649 = _v647.orientation
          _x = _v649
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.action_goal.goal.request.trajectory_constraints.constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.reference_trajectories = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.GenericTrajectory()
        _v650 = val1.header
        start = end
        end += 4
        (_v650.seq,) = _get_struct_I().unpack(str[start:end])
        _v651 = _v650.stamp
        _x = _v651
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v650.frame_id = str[start:end].decode('utf-8')
        else:
          _v650.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_trajectory = []
        for i in range(0, length):
          val2 = trajectory_msgs.msg.JointTrajectory()
          _v652 = val2.header
          start = end
          end += 4
          (_v652.seq,) = _get_struct_I().unpack(str[start:end])
          _v653 = _v652.stamp
          _x = _v653
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v652.frame_id = str[start:end].decode('utf-8')
          else:
            _v652.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.joint_names.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v654 = val3.time_from_start
            _x = _v654
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.joint_trajectory.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.cartesian_trajectory = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.CartesianTrajectory()
          _v655 = val2.header
          start = end
          end += 4
          (_v655.seq,) = _get_struct_I().unpack(str[start:end])
          _v656 = _v655.stamp
          _x = _v656
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v655.frame_id = str[start:end].decode('utf-8')
          else:
            _v655.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.tracked_frame = str[start:end].decode('utf-8')
          else:
            val2.tracked_frame = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = moveit_msgs.msg.CartesianTrajectoryPoint()
            _v657 = val3.point
            _v658 = _v657.pose
            _v659 = _v658.position
            _x = _v659
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v660 = _v658.orientation
            _x = _v660
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v661 = _v657.velocity
            _v662 = _v661.linear
            _x = _v662
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v663 = _v661.angular
            _x = _v663
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v664 = _v657.acceleration
            _v665 = _v664.linear
            _x = _v665
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v666 = _v664.angular
            _x = _v666
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v667 = val3.time_from_start
            _x = _v667
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.cartesian_trajectory.append(val2)
        self.action_goal.goal.request.reference_trajectories.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.planner_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.request.group_name = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.request.group_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.action_goal.goal.request.num_planning_attempts, _x.action_goal.goal.request.allowed_planning_time, _x.action_goal.goal.request.max_velocity_scaling_factor, _x.action_goal.goal.request.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v668 = val1.translation
        _x = _v668
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v669 = val1.rotation
        _x = _v669
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v670 = val1.linear
        _x = _v670
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v671 = val1.angular
        _x = _v671
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v672 = val1.force
        _x = _v672
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v673 = val1.torque
        _x = _v673
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v674 = val1.object
        _v675 = _v674.header
        start = end
        end += 4
        (_v675.seq,) = _get_struct_I().unpack(str[start:end])
        _v676 = _v675.stamp
        _x = _v676
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v675.frame_id = str[start:end].decode('utf-8')
        else:
          _v675.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v674.id = str[start:end].decode('utf-8')
        else:
          _v674.id = str[start:end]
        _v677 = _v674.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v677.key = str[start:end].decode('utf-8')
        else:
          _v677.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v677.db = str[start:end].decode('utf-8')
        else:
          _v677.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v674.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v674.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v674.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v678 = val3.position
          _x = _v678
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v679 = val3.orientation
          _x = _v679
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v674.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v674.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v674.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v674.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v680 = val3.position
          _x = _v680
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v681 = val3.orientation
          _x = _v681
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v674.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v674.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v674.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v674.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v682 = val3.position
          _x = _v682
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v683 = val3.orientation
          _x = _v683
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v674.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v674.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v674.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v674.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v684 = val3.position
          _x = _v684
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v685 = val3.orientation
          _x = _v685
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v674.subframe_poses.append(val3)
        start = end
        end += 1
        (_v674.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v686 = val1.detach_posture
        _v687 = _v686.header
        start = end
        end += 4
        (_v687.seq,) = _get_struct_I().unpack(str[start:end])
        _v688 = _v687.stamp
        _x = _v688
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v687.frame_id = str[start:end].decode('utf-8')
        else:
          _v687.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v686.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v686.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v686.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v689 = val3.time_from_start
          _x = _v689
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v686.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v690 = val1.header
        start = end
        end += 4
        (_v690.seq,) = _get_struct_I().unpack(str[start:end])
        _v691 = _v690.stamp
        _x = _v691
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v690.frame_id = str[start:end].decode('utf-8')
        else:
          _v690.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v692 = val1.transform
        _v693 = _v692.translation
        _x = _v693
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v694 = _v692.rotation
        _x = _v694
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.enabled = list(map(bool, val1.enabled))
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = list(map(bool, self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v695 = val1.color
        _x = _v695
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v696 = val1.header
        start = end
        end += 4
        (_v696.seq,) = _get_struct_I().unpack(str[start:end])
        _v697 = _v696.stamp
        _x = _v697
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v696.frame_id = str[start:end].decode('utf-8')
        else:
          _v696.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v698 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v698.key = str[start:end].decode('utf-8')
        else:
          _v698.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v698.db = str[start:end].decode('utf-8')
        else:
          _v698.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v699 = val2.position
          _x = _v699
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v700 = val2.orientation
          _x = _v700
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v701 = val2.position
          _x = _v701
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v702 = val2.orientation
          _x = _v702
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v703 = val2.position
          _x = _v703
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v704 = val2.orientation
          _x = _v704
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v705 = val2.position
          _x = _v705
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v706 = val2.orientation
          _x = _v706
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 40
      (_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3BidBid3I().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.is_diff)
      self.action_goal.goal.planning_options.plan_only = bool(self.action_goal.goal.planning_options.plan_only)
      self.action_goal.goal.planning_options.look_around = bool(self.action_goal.goal.planning_options.look_around)
      self.action_goal.goal.planning_options.replan = bool(self.action_goal.goal.planning_options.replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.action_result.result.error_code.val, _x.action_result.result.trajectory_start.joint_state.header.seq, _x.action_result.result.trajectory_start.joint_state.header.stamp.secs, _x.action_result.result.trajectory_start.joint_state.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.trajectory_start.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.trajectory_start.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.trajectory_start.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_start.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_start.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.action_result.result.trajectory_start.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.trajectory_start.multi_dof_joint_state.header.seq, _x.action_result.result.trajectory_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.trajectory_start.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.trajectory_start.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.trajectory_start.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.trajectory_start.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v707 = val1.translation
        _x = _v707
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v708 = val1.rotation
        _x = _v708
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_result.result.trajectory_start.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v709 = val1.linear
        _x = _v709
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v710 = val1.angular
        _x = _v710
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.trajectory_start.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v711 = val1.force
        _x = _v711
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v712 = val1.torque
        _x = _v712
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.trajectory_start.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.trajectory_start.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v713 = val1.object
        _v714 = _v713.header
        start = end
        end += 4
        (_v714.seq,) = _get_struct_I().unpack(str[start:end])
        _v715 = _v714.stamp
        _x = _v715
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v714.frame_id = str[start:end].decode('utf-8')
        else:
          _v714.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v713.id = str[start:end].decode('utf-8')
        else:
          _v713.id = str[start:end]
        _v716 = _v713.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v716.key = str[start:end].decode('utf-8')
        else:
          _v716.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v716.db = str[start:end].decode('utf-8')
        else:
          _v716.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v713.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v713.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v713.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v717 = val3.position
          _x = _v717
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v718 = val3.orientation
          _x = _v718
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v713.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v713.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v713.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v713.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v719 = val3.position
          _x = _v719
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v720 = val3.orientation
          _x = _v720
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v713.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v713.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v713.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v713.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v721 = val3.position
          _x = _v721
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v722 = val3.orientation
          _x = _v722
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v713.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v713.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v713.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v713.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v723 = val3.position
          _x = _v723
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v724 = val3.orientation
          _x = _v724
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v713.subframe_poses.append(val3)
        start = end
        end += 1
        (_v713.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v725 = val1.detach_posture
        _v726 = _v725.header
        start = end
        end += 4
        (_v726.seq,) = _get_struct_I().unpack(str[start:end])
        _v727 = _v726.stamp
        _x = _v727
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v726.frame_id = str[start:end].decode('utf-8')
        else:
          _v726.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v725.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v725.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v725.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v728 = val3.time_from_start
          _x = _v728
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v725.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_result.result.trajectory_start.attached_collision_objects.append(val1)
      _x = self
      start = end
      end += 13
      (_x.action_result.result.trajectory_start.is_diff, _x.action_result.result.planned_trajectory.joint_trajectory.header.seq, _x.action_result.result.planned_trajectory.joint_trajectory.header.stamp.secs, _x.action_result.result.planned_trajectory.joint_trajectory.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.action_result.result.trajectory_start.is_diff = bool(self.action_result.result.trajectory_start.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.planned_trajectory.joint_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.planned_trajectory.joint_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.planned_trajectory.joint_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.planned_trajectory.joint_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.planned_trajectory.joint_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v729 = val1.time_from_start
        _x = _v729
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.action_result.result.planned_trajectory.joint_trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.seq, _x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.stamp.secs, _x.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.transforms = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Transform()
          _v730 = val2.translation
          _x = _v730
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v731 = val2.rotation
          _x = _v731
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.transforms.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.velocities = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Twist()
          _v732 = val2.linear
          _x = _v732
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v733 = val2.angular
          _x = _v733
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.velocities.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.accelerations = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Twist()
          _v734 = val2.linear
          _x = _v734
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v735 = val2.angular
          _x = _v735
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.accelerations.append(val2)
        _v736 = val1.time_from_start
        _x = _v736
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.action_result.result.planned_trajectory.multi_dof_joint_trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.executed_trajectory.joint_trajectory.header.seq, _x.action_result.result.executed_trajectory.joint_trajectory.header.stamp.secs, _x.action_result.result.executed_trajectory.joint_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_trajectory.joint_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_trajectory.joint_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_trajectory.joint_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.executed_trajectory.joint_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_trajectory.joint_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v737 = val1.time_from_start
        _x = _v737
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.action_result.result.executed_trajectory.joint_trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.seq, _x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.stamp.secs, _x.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.transforms = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Transform()
          _v738 = val2.translation
          _x = _v738
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v739 = val2.rotation
          _x = _v739
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.transforms.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.velocities = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Twist()
          _v740 = val2.linear
          _x = _v740
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v741 = val2.angular
          _x = _v741
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.velocities.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.accelerations = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Twist()
          _v742 = val2.linear
          _x = _v742
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v743 = val2.angular
          _x = _v743
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.accelerations.append(val2)
        _v744 = val1.time_from_start
        _x = _v744
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.action_result.result.executed_trajectory.multi_dof_joint_trajectory.points.append(val1)
      _x = self
      start = end
      end += 20
      (_x.action_result.result.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.state = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_3BidBid3I = None
def _get_struct_3BidBid3I():
    global _struct_3BidBid3I
    if _struct_3BidBid3I is None:
        _struct_3BidBid3I = struct.Struct("<3BidBid3I")
    return _struct_3BidBid3I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_i3I = None
def _get_struct_i3I():
    global _struct_i3I
    if _struct_i3I is None:
        _struct_i3I = struct.Struct("<i3I")
    return _struct_i3I
_struct_6d3I = None
def _get_struct_6d3I():
    global _struct_6d3I
    if _struct_6d3I is None:
        _struct_6d3I = struct.Struct("<6d3I")
    return _struct_6d3I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_d3I = None
def _get_struct_d3I():
    global _struct_d3I
    if _struct_d3I is None:
        _struct_d3I = struct.Struct("<d3I")
    return _struct_d3I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_i3d = None
def _get_struct_i3d():
    global _struct_i3d
    if _struct_i3d is None:
        _struct_i3d = struct.Struct("<i3d")
    return _struct_i3d
_struct_2dBd = None
def _get_struct_2dBd():
    global _struct_2dBd
    if _struct_2dBd is None:
        _struct_2dBd = struct.Struct("<2dBd")
    return _struct_2dBd
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
