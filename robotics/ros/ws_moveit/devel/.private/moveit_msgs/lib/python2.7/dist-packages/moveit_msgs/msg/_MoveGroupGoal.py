# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_msgs/MoveGroupGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import geometry_msgs.msg
import shape_msgs.msg
import octomap_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import sensor_msgs.msg
import genpy
import std_msgs.msg

class MoveGroupGoal(genpy.Message):
  _md5sum = "2700e6dd6d945b8015a1dd23c770119b"
  _type = "moveit_msgs/MoveGroupGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Motion planning request to pass to planner
MotionPlanRequest request

# Planning options
PlanningOptions planning_options


================================================================================
MSG: moveit_msgs/MotionPlanRequest
# This service contains the definition for a request to the motion
# planner and the output it provides

# Parameters for the workspace that the planner should work inside
WorkspaceParameters workspace_parameters

# Starting state updates. If certain joints should be considered
# at positions other than the current ones, these positions should
# be set here
RobotState start_state

# The possible goal states for the model to plan for. Each element of
# the array defines a goal region. The goal is achieved
# if the constraints for a particular region are satisfied
Constraints[] goal_constraints

# No state at any point along the path in the produced motion plan will violate these constraints (this applies to all points, not just waypoints)
Constraints path_constraints

# The constraints the resulting trajectory must satisfy
TrajectoryConstraints trajectory_constraints

# A set of trajectories that may be used as reference or initial trajectories for (typically optimization-based) planners
# These trajectories do not override start_state or goal_constraints
GenericTrajectory[] reference_trajectories

# The name of the motion planner to use. If no name is specified,
# a default motion planner will be used
string planner_id

# The name of the group of joints on which this planner is operating
string group_name

# The number of times this plan is to be computed. Shortest solution
# will be reported.
int32 num_planning_attempts

# The maximum amount of time the motion planner is allowed to plan for (in seconds)
float64 allowed_planning_time

# Scaling factors for optionally reducing the maximum joint velocities and
# accelerations.  Allowed values are in (0,1].  The maximum joint velocity and
# acceleration specified in the robot model are multiplied by thier respective
# factors.  If either are outside their valid ranges (importantly, this
# includes being set to 0.0), the factor is set to the default value of 1.0
# internally (i.e., maximum joint velocity or maximum joint acceleration).
float64 max_velocity_scaling_factor
float64 max_acceleration_scaling_factor


================================================================================
MSG: moveit_msgs/WorkspaceParameters
# This message contains a set of parameters useful in
# setting up the volume (a box) in which the robot is allowed to move.
# This is useful only when planning for mobile parts of 
# the robot as well.

# Define the frame of reference for the box corners
Header header

# The minumum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 min_corner

# The maximum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 max_corner

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached 
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the specified header

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Named subframes on the object. Use these to define points of interest on the object that you want
# to plan with (e.g. "tip", "spout", "handle"). The id of the object will be prepended to the subframe.
# If an object with the id "screwdriver" and a subframe "tip" is in the scene, you can use the frame
# "screwdriver/tip" for planning.
# The length of the subframe_names and subframe_poses has to be identical.
string[] subframe_names
geometry_msgs/Pose[] subframe_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: moveit_msgs/Constraints
# This message contains a list of motion planning constraints.
# All constraints must be satisfied for a goal to be considered valid

string name

JointConstraint[] joint_constraints

PositionConstraint[] position_constraints

OrientationConstraint[] orientation_constraints

VisibilityConstraint[] visibility_constraints

================================================================================
MSG: moveit_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight
================================================================================
MSG: moveit_msgs/PositionConstraint
# This message contains the definition of a position constraint.

Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Vector3 target_point_offset

# The volume this constraint refers to 
BoundingVolume constraint_region

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/BoundingVolume
# Define a volume in 3D

# A set of solid geometric primitives that make up the volume to define (as a union)
shape_msgs/SolidPrimitive[] primitives

# The poses at which the primitives are located
geometry_msgs/Pose[] primitive_poses

# In addition to primitives, meshes can be specified to add to the bounding volume (again, as union)
shape_msgs/Mesh[] meshes

# The poses at which the meshes are located
geometry_msgs/Pose[] mesh_poses

================================================================================
MSG: moveit_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.

Header header

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# The robot link this constraint refers to
string link_name

# optional axis-angle error tolerances specified
float64 absolute_x_axis_tolerance
float64 absolute_y_axis_tolerance
float64 absolute_z_axis_tolerance

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/VisibilityConstraint
# The constraint is useful to maintain visibility to a disc (the target) in a particular frame.
# This disc forms the base of a visibiliy cone whose tip is at the origin of the sensor.
# Maintaining visibility is done by ensuring the robot does not obstruct the visibility cone.
# Note:
# This constraint does NOT enforce minimum or maximum distances between the sensor
# and the target, nor does it enforce the target to be in the field of view of
# the sensor. A PositionConstraint can (and probably should) be used for such purposes.

# The radius of the disc that should be maintained visible 
float64 target_radius

# The pose of the disc; as the robot moves, the pose of the disc may change as well
# This can be in the frame of a particular robot link, for example
geometry_msgs/PoseStamped target_pose

# From the sensor origin towards the target, the disc forms a visibility cone
# This cone is approximated using many sides. For example, when using 4 sides, 
# that in fact makes the visibility region be a pyramid.
# This value should always be 3 or more.
int32 cone_sides

# The pose in which visibility is to be maintained.
# The frame id should represent the robot link to which the sensor is attached.
# It is assumed the sensor can look directly at the target, in any direction.
# This assumption is usually not true, but additional PositionConstraints
# can resolve this issue.
geometry_msgs/PoseStamped sensor_pose

# Even though the disc is maintained visible, the visibility cone can be very small
# because of the orientation of the disc with respect to the sensor. It is possible
# for example to view the disk almost from a side, in which case the visibility cone 
# can end up having close to 0 volume. The view angle is defined to be the angle between
# the normal to the visibility disc and the direction vector from the sensor origin.
# The value below represents the minimum desired view angle. For a perfect view,
# this value will be 0 (the two vectors are exact opposites). For a completely obstructed view
# this value will be Pi/2 (the vectors are perpendicular). This value defined below 
# is the maximum view angle to be maintained. This should be a value in the open interval
# (0, Pi/2). If 0 is set, the view angle is NOT enforced.
float64 max_view_angle

# This angle is used similarly to max_view_angle but limits the maximum angle
# between the sensor origin direction vector and the axis that connects the
# sensor origin to the target frame origin. The value is again in the range (0, Pi/2)
# and is NOT enforced if set to 0.
float64 max_range_angle

# The axis that is assumed to indicate the direction of view for the sensor
# X = 2, Y = 1, Z = 0
uint8 SENSOR_Z=0
uint8 SENSOR_Y=1
uint8 SENSOR_X=2
uint8 sensor_view_direction

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: moveit_msgs/TrajectoryConstraints
# The array of constraints to consider along the trajectory
Constraints[] constraints

================================================================================
MSG: moveit_msgs/GenericTrajectory
# A generic trajectory message that may either encode a joint- or cartesian-space trajectory, or both
# Trajectories encoded in this message are considered semantically equivalent
Header header
trajectory_msgs/JointTrajectory[] joint_trajectory
moveit_msgs/CartesianTrajectory[] cartesian_trajectory

================================================================================
MSG: moveit_msgs/CartesianTrajectory
# This message describes the trajectory of a tracked frame in task-space
Header header

# The name of the Cartesian frame being tracked with respect to the base frame provided in header.frame_id
string tracked_frame

CartesianTrajectoryPoint[] points

================================================================================
MSG: moveit_msgs/CartesianTrajectoryPoint
# The definition of a cartesian point in a trajectory. Defines the cartesian state of the point and it's time,
# following the pattern of the JointTrajectory message
CartesianPoint point

duration time_from_start

================================================================================
MSG: moveit_msgs/CartesianPoint
# This message defines a point in a cartesian trajectory
geometry_msgs/Pose pose
geometry_msgs/Twist velocity
geometry_msgs/Accel acceleration
================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: moveit_msgs/PlanningOptions

# The diff to consider for the planning scene (optional)
PlanningScene planning_scene_diff

# If this flag is set to true, the action
# returns an executable plan in the response but does not attempt execution  
bool plan_only

# If this flag is set to true, the action of planning &
# executing is allowed to look around  (move sensors) if
# it seems that not enough information is available about
# the environment
bool look_around

# If this value is positive, the action of planning & executing
# is allowed to look around for a maximum number of attempts;
# If the value is left as 0, the default value is used, as set
# with dynamic_reconfigure
int32 look_around_attempts

# If set and if look_around is true, this value is used as
# the maximum cost allowed for a path to be considered executable.
# If the cost of a path is higher than this value, more sensing or 
# a new plan needed. If left as 0.0 but look_around is true, then 
# the default value set via dynamic_reconfigure is used
float64 max_safe_execution_cost

# If the plan becomes invalidated during execution, it is possible to have
# that plan recomputed and execution restarted. This flag enables this
# functionality 
bool replan

# The maximum number of replanning attempts 
int32 replan_attempts

# The amount of time to wait in between replanning attempts (in seconds)
float64 replan_delay

================================================================================
MSG: moveit_msgs/PlanningScene
# name of planning scene
string name

# full robot state
RobotState robot_state

# The name of the robot model this scene is for
string robot_model_name

#additional frames for duplicating tf (with respect to the planning frame)
geometry_msgs/TransformStamped[] fixed_frame_transforms

#full allowed collision matrix
AllowedCollisionMatrix allowed_collision_matrix

# all link paddings
LinkPadding[] link_padding

# all link scales
LinkScale[] link_scale

# Attached objects, collision objects, even the octomap or collision map can have 
# colors associated to them. This array specifies them.
ObjectColor[] object_colors

# the collision map
PlanningSceneWorld world

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
bool is_diff

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://wiki.ros.org/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: moveit_msgs/AllowedCollisionMatrix
# The list of entry names in the matrix
string[] entry_names

# The individual entries in the allowed collision matrix
# square, symmetric, with same order as entry_names
AllowedCollisionEntry[] entry_values

# In addition to the collision matrix itself, we also have 
# the default entry value for each entry name.

# If the allowed collision flag is queried for a pair of names (n1, n2)
# that is not found in the collision matrix itself, the value of
# the collision flag is considered to be that of the entry (n1 or n2)
# specified in the list below. If both n1 and n2 are found in the list 
# of defaults, the result is computed with an AND operation

string[] default_entry_names
bool[] default_entry_values

================================================================================
MSG: moveit_msgs/AllowedCollisionEntry
# whether or not collision checking is enabled
bool[] enabled

================================================================================
MSG: moveit_msgs/LinkPadding
#name for the link
string link_name

# padding to apply to the link
float64 padding

================================================================================
MSG: moveit_msgs/LinkScale
#name for the link
string link_name

# scaling to apply to the link
float64 scale

================================================================================
MSG: moveit_msgs/ObjectColor
# The object id for which we specify color
string id

# The value of the color
std_msgs/ColorRGBA color

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: moveit_msgs/PlanningSceneWorld
# collision objects
CollisionObject[] collision_objects

# The octomap that represents additional collision data
octomap_msgs/OctomapWithPose octomap

================================================================================
MSG: octomap_msgs/OctomapWithPose
# A 3D map in binary format, as Octree
Header header

# The pose of the octree with respect to the header frame 
geometry_msgs/Pose origin

# The actual octree msg
octomap_msgs/Octomap octomap

================================================================================
MSG: octomap_msgs/Octomap
# A 3D map in binary format, as Octree
Header header

# Flag to denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)
bool binary

# Class id of the contained octree 
string id

# Resolution (in m) of the smallest octree nodes
float64 resolution

# binary serialization of octree, use conversions.h to read and write octrees
int8[] data
"""
  __slots__ = ['request','planning_options']
  _slot_types = ['moveit_msgs/MotionPlanRequest','moveit_msgs/PlanningOptions']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request,planning_options

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveGroupGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.request is None:
        self.request = moveit_msgs.msg.MotionPlanRequest()
      if self.planning_options is None:
        self.planning_options = moveit_msgs.msg.PlanningOptions()
    else:
      self.request = moveit_msgs.msg.MotionPlanRequest()
      self.planning_options = moveit_msgs.msg.PlanningOptions()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.request.workspace_parameters.header.seq, _x.request.workspace_parameters.header.stamp.secs, _x.request.workspace_parameters.header.stamp.nsecs))
      _x = self.request.workspace_parameters.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d3I().pack(_x.request.workspace_parameters.min_corner.x, _x.request.workspace_parameters.min_corner.y, _x.request.workspace_parameters.min_corner.z, _x.request.workspace_parameters.max_corner.x, _x.request.workspace_parameters.max_corner.y, _x.request.workspace_parameters.max_corner.z, _x.request.start_state.joint_state.header.seq, _x.request.start_state.joint_state.header.stamp.secs, _x.request.start_state.joint_state.header.stamp.nsecs))
      _x = self.request.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.request.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.request.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.request.start_state.joint_state.position))
      length = len(self.request.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.request.start_state.joint_state.velocity))
      length = len(self.request.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.request.start_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.request.start_state.multi_dof_joint_state.header.seq, _x.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.request.start_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.request.start_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.request.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.request.start_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.transforms:
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.request.start_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.twist:
        _v3 = val1.linear
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.angular
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.request.start_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.wrench:
        _v5 = val1.force
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.torque
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.request.start_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v7 = val1.object
        _v8 = _v7.header
        buff.write(_get_struct_I().pack(_v8.seq))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v7.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v10 = _v7.type
        _x = _v10.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v10.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v7.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v7.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.primitive_poses:
          _v11 = val3.position
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v12 = val3.orientation
          _x = _v12
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v7.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.mesh_poses:
          _v13 = val3.position
          _x = _v13
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v14 = val3.orientation
          _x = _v14
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v7.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.plane_poses:
          _v15 = val3.position
          _x = _v15
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v16 = val3.orientation
          _x = _v16
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v7.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v7.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.subframe_poses:
          _v17 = val3.position
          _x = _v17
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v18 = val3.orientation
          _x = _v18
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v7.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v19 = val1.detach_posture
        _v20 = _v19.header
        buff.write(_get_struct_I().pack(_v20.seq))
        _v21 = _v20.stamp
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v20.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v19.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v19.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v22 = val3.time_from_start
          _x = _v22
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      buff.write(_get_struct_B().pack(self.request.start_state.is_diff))
      length = len(self.request.goal_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.goal_constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v23 = val2.header
          buff.write(_get_struct_I().pack(_v23.seq))
          _v24 = _v23.stamp
          _x = _v24
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v23.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v25 = val2.target_point_offset
          _x = _v25
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v26 = val2.constraint_region
          length = len(_v26.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v26.primitives:
            buff.write(_get_struct_B().pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.dimensions))
          length = len(_v26.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v26.primitive_poses:
            _v27 = val4.position
            _x = _v27
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v28 = val4.orientation
            _x = _v28
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v26.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v26.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(_get_struct_3I().pack(*val5.vertex_indices))
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v26.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v26.mesh_poses:
            _v29 = val4.position
            _x = _v29
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v30 = val4.orientation
            _x = _v30
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_d().pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v31 = val2.header
          buff.write(_get_struct_I().pack(_v31.seq))
          _v32 = _v31.stamp
          _x = _v32
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v31.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v33 = val2.orientation
          _x = _v33
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_get_struct_d().pack(val2.target_radius))
          _v34 = val2.target_pose
          _v35 = _v34.header
          buff.write(_get_struct_I().pack(_v35.seq))
          _v36 = _v35.stamp
          _x = _v36
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v35.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v37 = _v34.pose
          _v38 = _v37.position
          _x = _v38
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v39 = _v37.orientation
          _x = _v39
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_i().pack(val2.cone_sides))
          _v40 = val2.sensor_pose
          _v41 = _v40.header
          buff.write(_get_struct_I().pack(_v41.seq))
          _v42 = _v41.stamp
          _x = _v42
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v41.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v43 = _v40.pose
          _v44 = _v43.position
          _x = _v44
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v45 = _v43.orientation
          _x = _v45
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.request.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.request.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.request.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.position_constraints:
        _v46 = val1.header
        buff.write(_get_struct_I().pack(_v46.seq))
        _v47 = _v46.stamp
        _x = _v47
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v46.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v48 = val1.target_point_offset
        _x = _v48
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v49 = val1.constraint_region
        length = len(_v49.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v49.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.primitive_poses:
          _v50 = val3.position
          _x = _v50
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v51 = val3.orientation
          _x = _v51
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v49.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v49.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v49.mesh_poses:
          _v52 = val3.position
          _x = _v52
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v53 = val3.orientation
          _x = _v53
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_d().pack(val1.weight))
      length = len(self.request.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.orientation_constraints:
        _v54 = val1.header
        buff.write(_get_struct_I().pack(_v54.seq))
        _v55 = _v54.stamp
        _x = _v55
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v54.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v56 = val1.orientation
        _x = _v56
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
      length = len(self.request.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.visibility_constraints:
        buff.write(_get_struct_d().pack(val1.target_radius))
        _v57 = val1.target_pose
        _v58 = _v57.header
        buff.write(_get_struct_I().pack(_v58.seq))
        _v59 = _v58.stamp
        _x = _v59
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v58.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v60 = _v57.pose
        _v61 = _v60.position
        _x = _v61
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v62 = _v60.orientation
        _x = _v62
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_i().pack(val1.cone_sides))
        _v63 = val1.sensor_pose
        _v64 = _v63.header
        buff.write(_get_struct_I().pack(_v64.seq))
        _v65 = _v64.stamp
        _x = _v65
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v64.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v66 = _v63.pose
        _v67 = _v66.position
        _x = _v67
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v68 = _v66.orientation
        _x = _v68
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.request.trajectory_constraints.constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.trajectory_constraints.constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v69 = val2.header
          buff.write(_get_struct_I().pack(_v69.seq))
          _v70 = _v69.stamp
          _x = _v70
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v69.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v71 = val2.target_point_offset
          _x = _v71
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v72 = val2.constraint_region
          length = len(_v72.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v72.primitives:
            buff.write(_get_struct_B().pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.dimensions))
          length = len(_v72.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v72.primitive_poses:
            _v73 = val4.position
            _x = _v73
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v74 = val4.orientation
            _x = _v74
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v72.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v72.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(_get_struct_3I().pack(*val5.vertex_indices))
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v72.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v72.mesh_poses:
            _v75 = val4.position
            _x = _v75
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v76 = val4.orientation
            _x = _v76
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_d().pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v77 = val2.header
          buff.write(_get_struct_I().pack(_v77.seq))
          _v78 = _v77.stamp
          _x = _v78
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v77.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v79 = val2.orientation
          _x = _v79
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_get_struct_d().pack(val2.target_radius))
          _v80 = val2.target_pose
          _v81 = _v80.header
          buff.write(_get_struct_I().pack(_v81.seq))
          _v82 = _v81.stamp
          _x = _v82
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v81.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v83 = _v80.pose
          _v84 = _v83.position
          _x = _v84
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v85 = _v83.orientation
          _x = _v85
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_i().pack(val2.cone_sides))
          _v86 = val2.sensor_pose
          _v87 = _v86.header
          buff.write(_get_struct_I().pack(_v87.seq))
          _v88 = _v87.stamp
          _x = _v88
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v87.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v89 = _v86.pose
          _v90 = _v89.position
          _x = _v90
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v91 = _v89.orientation
          _x = _v91
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.request.reference_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.reference_trajectories:
        _v92 = val1.header
        buff.write(_get_struct_I().pack(_v92.seq))
        _v93 = _v92.stamp
        _x = _v93
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v92.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_trajectory:
          _v94 = val2.header
          buff.write(_get_struct_I().pack(_v94.seq))
          _v95 = _v94.stamp
          _x = _v95
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v94.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.joint_names)
          buff.write(_struct_I.pack(length))
          for val3 in val2.joint_names:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.pack('<I%ss'%length, length, val3))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.positions))
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.velocities))
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.accelerations))
            length = len(val3.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val3.effort))
            _v96 = val3.time_from_start
            _x = _v96
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.cartesian_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.cartesian_trajectory:
          _v97 = val2.header
          buff.write(_get_struct_I().pack(_v97.seq))
          _v98 = _v97.stamp
          _x = _v98
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v97.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.tracked_frame
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _v99 = val3.point
            _v100 = _v99.pose
            _v101 = _v100.position
            _x = _v101
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v102 = _v100.orientation
            _x = _v102
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _v103 = _v99.velocity
            _v104 = _v103.linear
            _x = _v104
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v105 = _v103.angular
            _x = _v105
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v106 = _v99.acceleration
            _v107 = _v106.linear
            _x = _v107
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v108 = _v106.angular
            _x = _v108
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v109 = val3.time_from_start
            _x = _v109
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self.request.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.request.num_planning_attempts, _x.request.allowed_planning_time, _x.request.max_velocity_scaling_factor, _x.request.max_acceleration_scaling_factor))
      _x = self.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.planning_options.planning_scene_diff.robot_state.joint_state.position))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.planning_options.planning_scene_diff.robot_state.joint_state.velocity))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.planning_options.planning_scene_diff.robot_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v110 = val1.translation
        _x = _v110
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v111 = val1.rotation
        _x = _v111
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v112 = val1.linear
        _x = _v112
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v113 = val1.angular
        _x = _v113
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v114 = val1.force
        _x = _v114
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v115 = val1.torque
        _x = _v115
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v116 = val1.object
        _v117 = _v116.header
        buff.write(_get_struct_I().pack(_v117.seq))
        _v118 = _v117.stamp
        _x = _v118
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v117.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v116.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v119 = _v116.type
        _x = _v119.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v119.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v116.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v116.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.primitive_poses:
          _v120 = val3.position
          _x = _v120
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v121 = val3.orientation
          _x = _v121
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v116.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v116.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.mesh_poses:
          _v122 = val3.position
          _x = _v122
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v123 = val3.orientation
          _x = _v123
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v116.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v116.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.plane_poses:
          _v124 = val3.position
          _x = _v124
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v125 = val3.orientation
          _x = _v125
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v116.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v116.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.subframe_poses:
          _v126 = val3.position
          _x = _v126
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v127 = val3.orientation
          _x = _v127
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v116.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v128 = val1.detach_posture
        _v129 = _v128.header
        buff.write(_get_struct_I().pack(_v129.seq))
        _v130 = _v129.stamp
        _x = _v130
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v129.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v128.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v128.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v128.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v128.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v131 = val3.time_from_start
          _x = _v131
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      buff.write(_get_struct_B().pack(self.planning_options.planning_scene_diff.robot_state.is_diff))
      _x = self.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v132 = val1.header
        buff.write(_get_struct_I().pack(_v132.seq))
        _v133 = _v132.stamp
        _x = _v133
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v132.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v134 = val1.transform
        _v135 = _v134.translation
        _x = _v135
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v136 = _v134.rotation
        _x = _v136
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.pack(pattern, *val1.enabled))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      length = len(self.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.padding))
      length = len(self.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.scale))
      length = len(self.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v137 = val1.color
        _x = _v137
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.world.collision_objects:
        _v138 = val1.header
        buff.write(_get_struct_I().pack(_v138.seq))
        _v139 = _v138.stamp
        _x = _v139
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v138.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v140 = val1.type
        _x = _v140.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v140.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_get_struct_B().pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.dimensions))
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v141 = val2.position
          _x = _v141
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v142 = val2.orientation
          _x = _v142
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(_get_struct_3I().pack(*val3.vertex_indices))
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v143 = val2.position
          _x = _v143
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v144 = val2.orientation
          _x = _v144
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(_get_struct_4d().pack(*val2.coef))
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v145 = val2.position
          _x = _v145
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v146 = val2.orientation
          _x = _v146
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v147 = val2.position
          _x = _v147
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v148 = val2.orientation
          _x = _v148
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(val1.operation))
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.world.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.planning_options.planning_scene_diff.world.octomap.octomap.binary))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.planning_options.planning_scene_diff.world.octomap.octomap.resolution))
      length = len(self.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.planning_options.planning_scene_diff.world.octomap.octomap.data))
      _x = self
      buff.write(_get_struct_3BidBid().pack(_x.planning_options.planning_scene_diff.is_diff, _x.planning_options.plan_only, _x.planning_options.look_around, _x.planning_options.look_around_attempts, _x.planning_options.max_safe_execution_cost, _x.planning_options.replan, _x.planning_options.replan_attempts, _x.planning_options.replan_delay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.request is None:
        self.request = moveit_msgs.msg.MotionPlanRequest()
      if self.planning_options is None:
        self.planning_options = moveit_msgs.msg.PlanningOptions()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.request.workspace_parameters.header.seq, _x.request.workspace_parameters.header.stamp.secs, _x.request.workspace_parameters.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.workspace_parameters.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.request.workspace_parameters.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.request.workspace_parameters.min_corner.x, _x.request.workspace_parameters.min_corner.y, _x.request.workspace_parameters.min_corner.z, _x.request.workspace_parameters.max_corner.x, _x.request.workspace_parameters.max_corner.y, _x.request.workspace_parameters.max_corner.z, _x.request.start_state.joint_state.header.seq, _x.request.start_state.joint_state.header.stamp.secs, _x.request.start_state.joint_state.header.stamp.nsecs,) = _get_struct_6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.request.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.request.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.request.start_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.request.start_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.request.start_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.request.start_state.multi_dof_joint_state.header.seq, _x.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.request.start_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.request.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v149 = val1.translation
        _x = _v149
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v150 = val1.rotation
        _x = _v150
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v151 = val1.linear
        _x = _v151
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v152 = val1.angular
        _x = _v152
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v153 = val1.force
        _x = _v153
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v154 = val1.torque
        _x = _v154
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v155 = val1.object
        _v156 = _v155.header
        start = end
        end += 4
        (_v156.seq,) = _get_struct_I().unpack(str[start:end])
        _v157 = _v156.stamp
        _x = _v157
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v156.frame_id = str[start:end].decode('utf-8')
        else:
          _v156.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v155.id = str[start:end].decode('utf-8')
        else:
          _v155.id = str[start:end]
        _v158 = _v155.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v158.key = str[start:end].decode('utf-8')
        else:
          _v158.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v158.db = str[start:end].decode('utf-8')
        else:
          _v158.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v155.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v155.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v155.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v159 = val3.position
          _x = _v159
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v160 = val3.orientation
          _x = _v160
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v155.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v155.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v155.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v155.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v161 = val3.position
          _x = _v161
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v162 = val3.orientation
          _x = _v162
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v155.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v155.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v155.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v155.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v163 = val3.position
          _x = _v163
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v164 = val3.orientation
          _x = _v164
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v155.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v155.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v155.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v155.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v165 = val3.position
          _x = _v165
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v166 = val3.orientation
          _x = _v166
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v155.subframe_poses.append(val3)
        start = end
        end += 1
        (_v155.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v167 = val1.detach_posture
        _v168 = _v167.header
        start = end
        end += 4
        (_v168.seq,) = _get_struct_I().unpack(str[start:end])
        _v169 = _v168.stamp
        _x = _v169
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v168.frame_id = str[start:end].decode('utf-8')
        else:
          _v168.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v167.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v167.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v167.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v170 = val3.time_from_start
          _x = _v170
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v167.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.request.start_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.request.start_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.request.start_state.is_diff = bool(self.request.start_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.goal_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v171 = val2.header
          start = end
          end += 4
          (_v171.seq,) = _get_struct_I().unpack(str[start:end])
          _v172 = _v171.stamp
          _x = _v172
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v171.frame_id = str[start:end].decode('utf-8')
          else:
            _v171.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v173 = val2.target_point_offset
          _x = _v173
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v174 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v174.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = struct.unpack(pattern, str[start:end])
            _v174.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v174.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v175 = val4.position
            _x = _v175
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v176 = val4.orientation
            _x = _v176
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v174.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v174.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v174.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v174.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v177 = val4.position
            _x = _v177
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v178 = val4.orientation
            _x = _v178
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v174.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v179 = val2.header
          start = end
          end += 4
          (_v179.seq,) = _get_struct_I().unpack(str[start:end])
          _v180 = _v179.stamp
          _x = _v180
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v179.frame_id = str[start:end].decode('utf-8')
          else:
            _v179.frame_id = str[start:end]
          _v181 = val2.orientation
          _x = _v181
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v182 = val2.target_pose
          _v183 = _v182.header
          start = end
          end += 4
          (_v183.seq,) = _get_struct_I().unpack(str[start:end])
          _v184 = _v183.stamp
          _x = _v184
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v183.frame_id = str[start:end].decode('utf-8')
          else:
            _v183.frame_id = str[start:end]
          _v185 = _v182.pose
          _v186 = _v185.position
          _x = _v186
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v187 = _v185.orientation
          _x = _v187
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v188 = val2.sensor_pose
          _v189 = _v188.header
          start = end
          end += 4
          (_v189.seq,) = _get_struct_I().unpack(str[start:end])
          _v190 = _v189.stamp
          _x = _v190
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v189.frame_id = str[start:end].decode('utf-8')
          else:
            _v189.frame_id = str[start:end]
          _v191 = _v188.pose
          _v192 = _v191.position
          _x = _v192
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v193 = _v191.orientation
          _x = _v193
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.request.goal_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.path_constraints.name = str[start:end].decode('utf-8')
      else:
        self.request.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.request.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v194 = val1.header
        start = end
        end += 4
        (_v194.seq,) = _get_struct_I().unpack(str[start:end])
        _v195 = _v194.stamp
        _x = _v195
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v194.frame_id = str[start:end].decode('utf-8')
        else:
          _v194.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v196 = val1.target_point_offset
        _x = _v196
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v197 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v197.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v197.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v197.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v198 = val3.position
          _x = _v198
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v199 = val3.orientation
          _x = _v199
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v197.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v197.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v197.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v197.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v200 = val3.position
          _x = _v200
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v201 = val3.orientation
          _x = _v201
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v197.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.request.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v202 = val1.header
        start = end
        end += 4
        (_v202.seq,) = _get_struct_I().unpack(str[start:end])
        _v203 = _v202.stamp
        _x = _v203
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v202.frame_id = str[start:end].decode('utf-8')
        else:
          _v202.frame_id = str[start:end]
        _v204 = val1.orientation
        _x = _v204
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.request.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _get_struct_d().unpack(str[start:end])
        _v205 = val1.target_pose
        _v206 = _v205.header
        start = end
        end += 4
        (_v206.seq,) = _get_struct_I().unpack(str[start:end])
        _v207 = _v206.stamp
        _x = _v207
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v206.frame_id = str[start:end].decode('utf-8')
        else:
          _v206.frame_id = str[start:end]
        _v208 = _v205.pose
        _v209 = _v208.position
        _x = _v209
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v210 = _v208.orientation
        _x = _v210
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _get_struct_i().unpack(str[start:end])
        _v211 = val1.sensor_pose
        _v212 = _v211.header
        start = end
        end += 4
        (_v212.seq,) = _get_struct_I().unpack(str[start:end])
        _v213 = _v212.stamp
        _x = _v213
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v212.frame_id = str[start:end].decode('utf-8')
        else:
          _v212.frame_id = str[start:end]
        _v214 = _v211.pose
        _v215 = _v214.position
        _x = _v215
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v216 = _v214.orientation
        _x = _v216
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
        self.request.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.trajectory_constraints.constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v217 = val2.header
          start = end
          end += 4
          (_v217.seq,) = _get_struct_I().unpack(str[start:end])
          _v218 = _v217.stamp
          _x = _v218
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v217.frame_id = str[start:end].decode('utf-8')
          else:
            _v217.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v219 = val2.target_point_offset
          _x = _v219
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v220 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v220.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = struct.unpack(pattern, str[start:end])
            _v220.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v220.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v221 = val4.position
            _x = _v221
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v222 = val4.orientation
            _x = _v222
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v220.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v220.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v220.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v220.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v223 = val4.position
            _x = _v223
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v224 = val4.orientation
            _x = _v224
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v220.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v225 = val2.header
          start = end
          end += 4
          (_v225.seq,) = _get_struct_I().unpack(str[start:end])
          _v226 = _v225.stamp
          _x = _v226
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v225.frame_id = str[start:end].decode('utf-8')
          else:
            _v225.frame_id = str[start:end]
          _v227 = val2.orientation
          _x = _v227
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v228 = val2.target_pose
          _v229 = _v228.header
          start = end
          end += 4
          (_v229.seq,) = _get_struct_I().unpack(str[start:end])
          _v230 = _v229.stamp
          _x = _v230
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v229.frame_id = str[start:end].decode('utf-8')
          else:
            _v229.frame_id = str[start:end]
          _v231 = _v228.pose
          _v232 = _v231.position
          _x = _v232
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v233 = _v231.orientation
          _x = _v233
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v234 = val2.sensor_pose
          _v235 = _v234.header
          start = end
          end += 4
          (_v235.seq,) = _get_struct_I().unpack(str[start:end])
          _v236 = _v235.stamp
          _x = _v236
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v235.frame_id = str[start:end].decode('utf-8')
          else:
            _v235.frame_id = str[start:end]
          _v237 = _v234.pose
          _v238 = _v237.position
          _x = _v238
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v239 = _v237.orientation
          _x = _v239
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.request.trajectory_constraints.constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.reference_trajectories = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.GenericTrajectory()
        _v240 = val1.header
        start = end
        end += 4
        (_v240.seq,) = _get_struct_I().unpack(str[start:end])
        _v241 = _v240.stamp
        _x = _v241
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v240.frame_id = str[start:end].decode('utf-8')
        else:
          _v240.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_trajectory = []
        for i in range(0, length):
          val2 = trajectory_msgs.msg.JointTrajectory()
          _v242 = val2.header
          start = end
          end += 4
          (_v242.seq,) = _get_struct_I().unpack(str[start:end])
          _v243 = _v242.stamp
          _x = _v243
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v242.frame_id = str[start:end].decode('utf-8')
          else:
            _v242.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.joint_names.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.effort = struct.unpack(pattern, str[start:end])
            _v244 = val3.time_from_start
            _x = _v244
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.joint_trajectory.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.cartesian_trajectory = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.CartesianTrajectory()
          _v245 = val2.header
          start = end
          end += 4
          (_v245.seq,) = _get_struct_I().unpack(str[start:end])
          _v246 = _v245.stamp
          _x = _v246
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v245.frame_id = str[start:end].decode('utf-8')
          else:
            _v245.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.tracked_frame = str[start:end].decode('utf-8')
          else:
            val2.tracked_frame = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = moveit_msgs.msg.CartesianTrajectoryPoint()
            _v247 = val3.point
            _v248 = _v247.pose
            _v249 = _v248.position
            _x = _v249
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v250 = _v248.orientation
            _x = _v250
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v251 = _v247.velocity
            _v252 = _v251.linear
            _x = _v252
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v253 = _v251.angular
            _x = _v253
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v254 = _v247.acceleration
            _v255 = _v254.linear
            _x = _v255
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v256 = _v254.angular
            _x = _v256
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v257 = val3.time_from_start
            _x = _v257
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.cartesian_trajectory.append(val2)
        self.request.reference_trajectories.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.planner_id = str[start:end].decode('utf-8')
      else:
        self.request.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.group_name = str[start:end].decode('utf-8')
      else:
        self.request.group_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.request.num_planning_attempts, _x.request.allowed_planning_time, _x.request.max_velocity_scaling_factor, _x.request.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.planning_options.planning_scene_diff.robot_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.planning_options.planning_scene_diff.robot_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.planning_options.planning_scene_diff.robot_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v258 = val1.translation
        _x = _v258
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v259 = val1.rotation
        _x = _v259
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v260 = val1.linear
        _x = _v260
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v261 = val1.angular
        _x = _v261
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v262 = val1.force
        _x = _v262
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v263 = val1.torque
        _x = _v263
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v264 = val1.object
        _v265 = _v264.header
        start = end
        end += 4
        (_v265.seq,) = _get_struct_I().unpack(str[start:end])
        _v266 = _v265.stamp
        _x = _v266
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v265.frame_id = str[start:end].decode('utf-8')
        else:
          _v265.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v264.id = str[start:end].decode('utf-8')
        else:
          _v264.id = str[start:end]
        _v267 = _v264.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v267.key = str[start:end].decode('utf-8')
        else:
          _v267.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v267.db = str[start:end].decode('utf-8')
        else:
          _v267.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v264.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v264.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v264.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v268 = val3.position
          _x = _v268
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v269 = val3.orientation
          _x = _v269
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v264.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v264.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v264.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v264.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v270 = val3.position
          _x = _v270
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v271 = val3.orientation
          _x = _v271
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v264.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v264.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v264.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v264.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v272 = val3.position
          _x = _v272
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v273 = val3.orientation
          _x = _v273
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v264.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v264.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v264.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v264.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v274 = val3.position
          _x = _v274
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v275 = val3.orientation
          _x = _v275
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v264.subframe_poses.append(val3)
        start = end
        end += 1
        (_v264.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v276 = val1.detach_posture
        _v277 = _v276.header
        start = end
        end += 4
        (_v277.seq,) = _get_struct_I().unpack(str[start:end])
        _v278 = _v277.stamp
        _x = _v278
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v277.frame_id = str[start:end].decode('utf-8')
        else:
          _v277.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v276.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v276.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v276.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v279 = val3.time_from_start
          _x = _v279
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v276.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.planning_options.planning_scene_diff.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v280 = val1.header
        start = end
        end += 4
        (_v280.seq,) = _get_struct_I().unpack(str[start:end])
        _v281 = _v280.stamp
        _x = _v281
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v280.frame_id = str[start:end].decode('utf-8')
        else:
          _v280.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v282 = val1.transform
        _v283 = _v282.translation
        _x = _v283
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v284 = _v282.rotation
        _x = _v284
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.enabled = struct.unpack(pattern, str[start:end])
        val1.enabled = list(map(bool, val1.enabled))
        self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = struct.unpack(pattern, str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = list(map(bool, self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v285 = val1.color
        _x = _v285
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v286 = val1.header
        start = end
        end += 4
        (_v286.seq,) = _get_struct_I().unpack(str[start:end])
        _v287 = _v286.stamp
        _x = _v287
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v286.frame_id = str[start:end].decode('utf-8')
        else:
          _v286.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v288 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v288.key = str[start:end].decode('utf-8')
        else:
          _v288.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v288.db = str[start:end].decode('utf-8')
        else:
          _v288.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = struct.unpack(pattern, str[start:end])
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v289 = val2.position
          _x = _v289
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v290 = val2.orientation
          _x = _v290
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v291 = val2.position
          _x = _v291
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v292 = val2.orientation
          _x = _v292
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = _get_struct_4d().unpack(str[start:end])
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v293 = val2.position
          _x = _v293
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v294 = val2.orientation
          _x = _v294
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v295 = val2.position
          _x = _v295
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v296 = val2.orientation
          _x = _v296
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.world.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.planning_options.planning_scene_diff.world.octomap.octomap.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 28
      (_x.planning_options.planning_scene_diff.is_diff, _x.planning_options.plan_only, _x.planning_options.look_around, _x.planning_options.look_around_attempts, _x.planning_options.max_safe_execution_cost, _x.planning_options.replan, _x.planning_options.replan_attempts, _x.planning_options.replan_delay,) = _get_struct_3BidBid().unpack(str[start:end])
      self.planning_options.planning_scene_diff.is_diff = bool(self.planning_options.planning_scene_diff.is_diff)
      self.planning_options.plan_only = bool(self.planning_options.plan_only)
      self.planning_options.look_around = bool(self.planning_options.look_around)
      self.planning_options.replan = bool(self.planning_options.replan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.request.workspace_parameters.header.seq, _x.request.workspace_parameters.header.stamp.secs, _x.request.workspace_parameters.header.stamp.nsecs))
      _x = self.request.workspace_parameters.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d3I().pack(_x.request.workspace_parameters.min_corner.x, _x.request.workspace_parameters.min_corner.y, _x.request.workspace_parameters.min_corner.z, _x.request.workspace_parameters.max_corner.x, _x.request.workspace_parameters.max_corner.y, _x.request.workspace_parameters.max_corner.z, _x.request.start_state.joint_state.header.seq, _x.request.start_state.joint_state.header.stamp.secs, _x.request.start_state.joint_state.header.stamp.nsecs))
      _x = self.request.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.request.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.request.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.request.start_state.joint_state.position.tostring())
      length = len(self.request.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.request.start_state.joint_state.velocity.tostring())
      length = len(self.request.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.request.start_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.request.start_state.multi_dof_joint_state.header.seq, _x.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.request.start_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.request.start_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.request.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.request.start_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.transforms:
        _v297 = val1.translation
        _x = _v297
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v298 = val1.rotation
        _x = _v298
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.request.start_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.twist:
        _v299 = val1.linear
        _x = _v299
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v300 = val1.angular
        _x = _v300
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.request.start_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.multi_dof_joint_state.wrench:
        _v301 = val1.force
        _x = _v301
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v302 = val1.torque
        _x = _v302
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.request.start_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.start_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v303 = val1.object
        _v304 = _v303.header
        buff.write(_get_struct_I().pack(_v304.seq))
        _v305 = _v304.stamp
        _x = _v305
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v304.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v303.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v306 = _v303.type
        _x = _v306.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v306.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v303.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v303.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v303.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v303.primitive_poses:
          _v307 = val3.position
          _x = _v307
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v308 = val3.orientation
          _x = _v308
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v303.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v303.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v303.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v303.mesh_poses:
          _v309 = val3.position
          _x = _v309
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v310 = val3.orientation
          _x = _v310
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v303.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v303.planes:
          buff.write(val3.coef.tostring())
        length = len(_v303.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v303.plane_poses:
          _v311 = val3.position
          _x = _v311
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v312 = val3.orientation
          _x = _v312
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v303.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v303.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v303.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v303.subframe_poses:
          _v313 = val3.position
          _x = _v313
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v314 = val3.orientation
          _x = _v314
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v303.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v315 = val1.detach_posture
        _v316 = _v315.header
        buff.write(_get_struct_I().pack(_v316.seq))
        _v317 = _v316.stamp
        _x = _v317
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v316.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v315.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v315.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v315.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v315.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v318 = val3.time_from_start
          _x = _v318
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      buff.write(_get_struct_B().pack(self.request.start_state.is_diff))
      length = len(self.request.goal_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.goal_constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v319 = val2.header
          buff.write(_get_struct_I().pack(_v319.seq))
          _v320 = _v319.stamp
          _x = _v320
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v319.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v321 = val2.target_point_offset
          _x = _v321
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v322 = val2.constraint_region
          length = len(_v322.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v322.primitives:
            buff.write(_get_struct_B().pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.dimensions.tostring())
          length = len(_v322.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v322.primitive_poses:
            _v323 = val4.position
            _x = _v323
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v324 = val4.orientation
            _x = _v324
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v322.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v322.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(val5.vertex_indices.tostring())
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v322.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v322.mesh_poses:
            _v325 = val4.position
            _x = _v325
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v326 = val4.orientation
            _x = _v326
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_d().pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v327 = val2.header
          buff.write(_get_struct_I().pack(_v327.seq))
          _v328 = _v327.stamp
          _x = _v328
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v327.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v329 = val2.orientation
          _x = _v329
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_get_struct_d().pack(val2.target_radius))
          _v330 = val2.target_pose
          _v331 = _v330.header
          buff.write(_get_struct_I().pack(_v331.seq))
          _v332 = _v331.stamp
          _x = _v332
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v331.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v333 = _v330.pose
          _v334 = _v333.position
          _x = _v334
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v335 = _v333.orientation
          _x = _v335
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_i().pack(val2.cone_sides))
          _v336 = val2.sensor_pose
          _v337 = _v336.header
          buff.write(_get_struct_I().pack(_v337.seq))
          _v338 = _v337.stamp
          _x = _v338
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v337.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v339 = _v336.pose
          _v340 = _v339.position
          _x = _v340
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v341 = _v339.orientation
          _x = _v341
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      _x = self.request.path_constraints.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.request.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.request.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.position_constraints:
        _v342 = val1.header
        buff.write(_get_struct_I().pack(_v342.seq))
        _v343 = _v342.stamp
        _x = _v343
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v342.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v344 = val1.target_point_offset
        _x = _v344
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v345 = val1.constraint_region
        length = len(_v345.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v345.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v345.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v345.primitive_poses:
          _v346 = val3.position
          _x = _v346
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v347 = val3.orientation
          _x = _v347
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v345.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v345.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v345.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v345.mesh_poses:
          _v348 = val3.position
          _x = _v348
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v349 = val3.orientation
          _x = _v349
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_d().pack(val1.weight))
      length = len(self.request.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.orientation_constraints:
        _v350 = val1.header
        buff.write(_get_struct_I().pack(_v350.seq))
        _v351 = _v350.stamp
        _x = _v351
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v350.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v352 = val1.orientation
        _x = _v352
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
      length = len(self.request.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.path_constraints.visibility_constraints:
        buff.write(_get_struct_d().pack(val1.target_radius))
        _v353 = val1.target_pose
        _v354 = _v353.header
        buff.write(_get_struct_I().pack(_v354.seq))
        _v355 = _v354.stamp
        _x = _v355
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v354.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v356 = _v353.pose
        _v357 = _v356.position
        _x = _v357
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v358 = _v356.orientation
        _x = _v358
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_i().pack(val1.cone_sides))
        _v359 = val1.sensor_pose
        _v360 = _v359.header
        buff.write(_get_struct_I().pack(_v360.seq))
        _v361 = _v360.stamp
        _x = _v361
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v360.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v362 = _v359.pose
        _v363 = _v362.position
        _x = _v363
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v364 = _v362.orientation
        _x = _v364
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.request.trajectory_constraints.constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.trajectory_constraints.constraints:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_constraints:
          _x = val2.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(val1.position_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.position_constraints:
          _v365 = val2.header
          buff.write(_get_struct_I().pack(_v365.seq))
          _v366 = _v365.stamp
          _x = _v366
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v365.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v367 = val2.target_point_offset
          _x = _v367
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v368 = val2.constraint_region
          length = len(_v368.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v368.primitives:
            buff.write(_get_struct_B().pack(val4.type))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.dimensions.tostring())
          length = len(_v368.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v368.primitive_poses:
            _v369 = val4.position
            _x = _v369
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v370 = val4.orientation
            _x = _v370
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v368.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v368.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(val5.vertex_indices.tostring())
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v368.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v368.mesh_poses:
            _v371 = val4.position
            _x = _v371
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v372 = val4.orientation
            _x = _v372
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_d().pack(val2.weight))
        length = len(val1.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.orientation_constraints:
          _v373 = val2.header
          buff.write(_get_struct_I().pack(_v373.seq))
          _v374 = _v373.stamp
          _x = _v374
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v373.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v375 = val2.orientation
          _x = _v375
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(val1.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.visibility_constraints:
          buff.write(_get_struct_d().pack(val2.target_radius))
          _v376 = val2.target_pose
          _v377 = _v376.header
          buff.write(_get_struct_I().pack(_v377.seq))
          _v378 = _v377.stamp
          _x = _v378
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v377.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v379 = _v376.pose
          _v380 = _v379.position
          _x = _v380
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v381 = _v379.orientation
          _x = _v381
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_get_struct_i().pack(val2.cone_sides))
          _v382 = val2.sensor_pose
          _v383 = _v382.header
          buff.write(_get_struct_I().pack(_v383.seq))
          _v384 = _v383.stamp
          _x = _v384
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v383.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _v385 = _v382.pose
          _v386 = _v385.position
          _x = _v386
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v387 = _v385.orientation
          _x = _v387
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val2
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
      length = len(self.request.reference_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.request.reference_trajectories:
        _v388 = val1.header
        buff.write(_get_struct_I().pack(_v388.seq))
        _v389 = _v388.stamp
        _x = _v389
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v388.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.joint_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.joint_trajectory:
          _v390 = val2.header
          buff.write(_get_struct_I().pack(_v390.seq))
          _v391 = _v390.stamp
          _x = _v391
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v390.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.joint_names)
          buff.write(_struct_I.pack(length))
          for val3 in val2.joint_names:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.pack('<I%ss'%length, length, val3))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            length = len(val3.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.positions.tostring())
            length = len(val3.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.velocities.tostring())
            length = len(val3.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.accelerations.tostring())
            length = len(val3.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val3.effort.tostring())
            _v392 = val3.time_from_start
            _x = _v392
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        length = len(val1.cartesian_trajectory)
        buff.write(_struct_I.pack(length))
        for val2 in val1.cartesian_trajectory:
          _v393 = val2.header
          buff.write(_get_struct_I().pack(_v393.seq))
          _v394 = _v393.stamp
          _x = _v394
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v393.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.tracked_frame
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(val2.points)
          buff.write(_struct_I.pack(length))
          for val3 in val2.points:
            _v395 = val3.point
            _v396 = _v395.pose
            _v397 = _v396.position
            _x = _v397
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v398 = _v396.orientation
            _x = _v398
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _v399 = _v395.velocity
            _v400 = _v399.linear
            _x = _v400
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v401 = _v399.angular
            _x = _v401
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v402 = _v395.acceleration
            _v403 = _v402.linear
            _x = _v403
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v404 = _v402.angular
            _x = _v404
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v405 = val3.time_from_start
            _x = _v405
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self.request.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.request.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i3d().pack(_x.request.num_planning_attempts, _x.request.allowed_planning_time, _x.request.max_velocity_scaling_factor, _x.request.max_acceleration_scaling_factor))
      _x = self.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.planning_options.planning_scene_diff.robot_state.joint_state.position.tostring())
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.planning_options.planning_scene_diff.robot_state.joint_state.velocity.tostring())
      length = len(self.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.planning_options.planning_scene_diff.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v406 = val1.translation
        _x = _v406
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v407 = val1.rotation
        _x = _v407
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v408 = val1.linear
        _x = _v408
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v409 = val1.angular
        _x = _v409
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v410 = val1.force
        _x = _v410
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v411 = val1.torque
        _x = _v411
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v412 = val1.object
        _v413 = _v412.header
        buff.write(_get_struct_I().pack(_v413.seq))
        _v414 = _v413.stamp
        _x = _v414
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v413.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v412.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v415 = _v412.type
        _x = _v415.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v415.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v412.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v412.primitives:
          buff.write(_get_struct_B().pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v412.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v412.primitive_poses:
          _v416 = val3.position
          _x = _v416
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v417 = val3.orientation
          _x = _v417
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v412.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v412.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v412.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v412.mesh_poses:
          _v418 = val3.position
          _x = _v418
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v419 = val3.orientation
          _x = _v419
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v412.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v412.planes:
          buff.write(val3.coef.tostring())
        length = len(_v412.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v412.plane_poses:
          _v420 = val3.position
          _x = _v420
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v421 = val3.orientation
          _x = _v421
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v412.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v412.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v412.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v412.subframe_poses:
          _v422 = val3.position
          _x = _v422
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v423 = val3.orientation
          _x = _v423
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(_v412.operation))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        _v424 = val1.detach_posture
        _v425 = _v424.header
        buff.write(_get_struct_I().pack(_v425.seq))
        _v426 = _v425.stamp
        _x = _v426
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v425.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v424.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v424.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v424.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v424.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v427 = val3.time_from_start
          _x = _v427
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_d().pack(val1.weight))
      buff.write(_get_struct_B().pack(self.planning_options.planning_scene_diff.robot_state.is_diff))
      _x = self.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v428 = val1.header
        buff.write(_get_struct_I().pack(_v428.seq))
        _v429 = _v428.stamp
        _x = _v429
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v428.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v430 = val1.transform
        _v431 = _v430.translation
        _x = _v431
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v432 = _v430.rotation
        _x = _v432
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.enabled.tostring())
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values.tostring())
      length = len(self.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.padding))
      length = len(self.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.scale))
      length = len(self.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v433 = val1.color
        _x = _v433
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.planning_options.planning_scene_diff.world.collision_objects:
        _v434 = val1.header
        buff.write(_get_struct_I().pack(_v434.seq))
        _v435 = _v434.stamp
        _x = _v435
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v434.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v436 = val1.type
        _x = _v436.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v436.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_get_struct_B().pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.dimensions.tostring())
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v437 = val2.position
          _x = _v437
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v438 = val2.orientation
          _x = _v438
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(val3.vertex_indices.tostring())
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v439 = val2.position
          _x = _v439
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v440 = val2.orientation
          _x = _v440
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(val2.coef.tostring())
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v441 = val2.position
          _x = _v441
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v442 = val2.orientation
          _x = _v442
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.subframe_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.subframe_poses:
          _v443 = val2.position
          _x = _v443
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v444 = val2.orientation
          _x = _v444
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_b().pack(val1.operation))
      _x = self
      buff.write(_get_struct_3I().pack(_x.planning_options.planning_scene_diff.world.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.planning_options.planning_scene_diff.world.octomap.octomap.binary))
      _x = self.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.planning_options.planning_scene_diff.world.octomap.octomap.resolution))
      length = len(self.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.planning_options.planning_scene_diff.world.octomap.octomap.data.tostring())
      _x = self
      buff.write(_get_struct_3BidBid().pack(_x.planning_options.planning_scene_diff.is_diff, _x.planning_options.plan_only, _x.planning_options.look_around, _x.planning_options.look_around_attempts, _x.planning_options.max_safe_execution_cost, _x.planning_options.replan, _x.planning_options.replan_attempts, _x.planning_options.replan_delay))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.request is None:
        self.request = moveit_msgs.msg.MotionPlanRequest()
      if self.planning_options is None:
        self.planning_options = moveit_msgs.msg.PlanningOptions()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.request.workspace_parameters.header.seq, _x.request.workspace_parameters.header.stamp.secs, _x.request.workspace_parameters.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.workspace_parameters.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.request.workspace_parameters.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.request.workspace_parameters.min_corner.x, _x.request.workspace_parameters.min_corner.y, _x.request.workspace_parameters.min_corner.z, _x.request.workspace_parameters.max_corner.x, _x.request.workspace_parameters.max_corner.y, _x.request.workspace_parameters.max_corner.z, _x.request.start_state.joint_state.header.seq, _x.request.start_state.joint_state.header.stamp.secs, _x.request.start_state.joint_state.header.stamp.nsecs,) = _get_struct_6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.request.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.request.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.request.start_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.request.start_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.request.start_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.request.start_state.multi_dof_joint_state.header.seq, _x.request.start_state.multi_dof_joint_state.header.stamp.secs, _x.request.start_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.request.start_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.request.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v445 = val1.translation
        _x = _v445
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v446 = val1.rotation
        _x = _v446
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v447 = val1.linear
        _x = _v447
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v448 = val1.angular
        _x = _v448
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v449 = val1.force
        _x = _v449
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v450 = val1.torque
        _x = _v450
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.request.start_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.start_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v451 = val1.object
        _v452 = _v451.header
        start = end
        end += 4
        (_v452.seq,) = _get_struct_I().unpack(str[start:end])
        _v453 = _v452.stamp
        _x = _v453
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v452.frame_id = str[start:end].decode('utf-8')
        else:
          _v452.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v451.id = str[start:end].decode('utf-8')
        else:
          _v451.id = str[start:end]
        _v454 = _v451.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v454.key = str[start:end].decode('utf-8')
        else:
          _v454.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v454.db = str[start:end].decode('utf-8')
        else:
          _v454.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v451.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v451.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v451.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v455 = val3.position
          _x = _v455
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v456 = val3.orientation
          _x = _v456
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v451.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v451.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v451.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v451.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v457 = val3.position
          _x = _v457
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v458 = val3.orientation
          _x = _v458
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v451.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v451.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v451.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v451.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v459 = val3.position
          _x = _v459
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v460 = val3.orientation
          _x = _v460
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v451.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v451.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v451.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v451.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v461 = val3.position
          _x = _v461
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v462 = val3.orientation
          _x = _v462
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v451.subframe_poses.append(val3)
        start = end
        end += 1
        (_v451.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v463 = val1.detach_posture
        _v464 = _v463.header
        start = end
        end += 4
        (_v464.seq,) = _get_struct_I().unpack(str[start:end])
        _v465 = _v464.stamp
        _x = _v465
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v464.frame_id = str[start:end].decode('utf-8')
        else:
          _v464.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v463.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v463.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v463.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v466 = val3.time_from_start
          _x = _v466
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v463.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.request.start_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.request.start_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.request.start_state.is_diff = bool(self.request.start_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.goal_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v467 = val2.header
          start = end
          end += 4
          (_v467.seq,) = _get_struct_I().unpack(str[start:end])
          _v468 = _v467.stamp
          _x = _v468
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v467.frame_id = str[start:end].decode('utf-8')
          else:
            _v467.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v469 = val2.target_point_offset
          _x = _v469
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v470 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v470.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v470.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v470.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v471 = val4.position
            _x = _v471
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v472 = val4.orientation
            _x = _v472
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v470.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v470.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v470.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v470.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v473 = val4.position
            _x = _v473
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v474 = val4.orientation
            _x = _v474
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v470.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v475 = val2.header
          start = end
          end += 4
          (_v475.seq,) = _get_struct_I().unpack(str[start:end])
          _v476 = _v475.stamp
          _x = _v476
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v475.frame_id = str[start:end].decode('utf-8')
          else:
            _v475.frame_id = str[start:end]
          _v477 = val2.orientation
          _x = _v477
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v478 = val2.target_pose
          _v479 = _v478.header
          start = end
          end += 4
          (_v479.seq,) = _get_struct_I().unpack(str[start:end])
          _v480 = _v479.stamp
          _x = _v480
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v479.frame_id = str[start:end].decode('utf-8')
          else:
            _v479.frame_id = str[start:end]
          _v481 = _v478.pose
          _v482 = _v481.position
          _x = _v482
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v483 = _v481.orientation
          _x = _v483
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v484 = val2.sensor_pose
          _v485 = _v484.header
          start = end
          end += 4
          (_v485.seq,) = _get_struct_I().unpack(str[start:end])
          _v486 = _v485.stamp
          _x = _v486
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v485.frame_id = str[start:end].decode('utf-8')
          else:
            _v485.frame_id = str[start:end]
          _v487 = _v484.pose
          _v488 = _v487.position
          _x = _v488
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v489 = _v487.orientation
          _x = _v489
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.request.goal_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.path_constraints.name = str[start:end].decode('utf-8')
      else:
        self.request.path_constraints.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.request.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.PositionConstraint()
        _v490 = val1.header
        start = end
        end += 4
        (_v490.seq,) = _get_struct_I().unpack(str[start:end])
        _v491 = _v490.stamp
        _x = _v491
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v490.frame_id = str[start:end].decode('utf-8')
        else:
          _v490.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v492 = val1.target_point_offset
        _x = _v492
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v493 = val1.constraint_region
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v493.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v493.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v493.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v494 = val3.position
          _x = _v494
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v495 = val3.orientation
          _x = _v495
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v493.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v493.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v493.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v493.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v496 = val3.position
          _x = _v496
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v497 = val3.orientation
          _x = _v497
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v493.mesh_poses.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.request.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.OrientationConstraint()
        _v498 = val1.header
        start = end
        end += 4
        (_v498.seq,) = _get_struct_I().unpack(str[start:end])
        _v499 = _v498.stamp
        _x = _v499
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v498.frame_id = str[start:end].decode('utf-8')
        else:
          _v498.frame_id = str[start:end]
        _v500 = val1.orientation
        _x = _v500
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
        self.request.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.VisibilityConstraint()
        start = end
        end += 8
        (val1.target_radius,) = _get_struct_d().unpack(str[start:end])
        _v501 = val1.target_pose
        _v502 = _v501.header
        start = end
        end += 4
        (_v502.seq,) = _get_struct_I().unpack(str[start:end])
        _v503 = _v502.stamp
        _x = _v503
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v502.frame_id = str[start:end].decode('utf-8')
        else:
          _v502.frame_id = str[start:end]
        _v504 = _v501.pose
        _v505 = _v504.position
        _x = _v505
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v506 = _v504.orientation
        _x = _v506
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (val1.cone_sides,) = _get_struct_i().unpack(str[start:end])
        _v507 = val1.sensor_pose
        _v508 = _v507.header
        start = end
        end += 4
        (_v508.seq,) = _get_struct_I().unpack(str[start:end])
        _v509 = _v508.stamp
        _x = _v509
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v508.frame_id = str[start:end].decode('utf-8')
        else:
          _v508.frame_id = str[start:end]
        _v510 = _v507.pose
        _v511 = _v510.position
        _x = _v511
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v512 = _v510.orientation
        _x = _v512
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _x = val1
        start = end
        end += 25
        (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
        self.request.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.trajectory_constraints.constraints = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Constraints()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.joint_name = str[start:end].decode('utf-8')
          else:
            val2.joint_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.joint_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.position_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.PositionConstraint()
          _v513 = val2.header
          start = end
          end += 4
          (_v513.seq,) = _get_struct_I().unpack(str[start:end])
          _v514 = _v513.stamp
          _x = _v514
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v513.frame_id = str[start:end].decode('utf-8')
          else:
            _v513.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _v515 = val2.target_point_offset
          _x = _v515
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v516 = val2.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v516.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v516.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v516.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v517 = val4.position
            _x = _v517
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v518 = val4.orientation
            _x = _v518
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v516.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v516.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v516.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v516.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v519 = val4.position
            _x = _v519
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v520 = val4.orientation
            _x = _v520
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v516.mesh_poses.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.position_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.orientation_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.OrientationConstraint()
          _v521 = val2.header
          start = end
          end += 4
          (_v521.seq,) = _get_struct_I().unpack(str[start:end])
          _v522 = _v521.stamp
          _x = _v522
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v521.frame_id = str[start:end].decode('utf-8')
          else:
            _v521.frame_id = str[start:end]
          _v523 = val2.orientation
          _x = _v523
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8')
          else:
            val2.link_name = str[start:end]
          _x = val2
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          val1.orientation_constraints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.visibility_constraints = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val2.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v524 = val2.target_pose
          _v525 = _v524.header
          start = end
          end += 4
          (_v525.seq,) = _get_struct_I().unpack(str[start:end])
          _v526 = _v525.stamp
          _x = _v526
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v525.frame_id = str[start:end].decode('utf-8')
          else:
            _v525.frame_id = str[start:end]
          _v527 = _v524.pose
          _v528 = _v527.position
          _x = _v528
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v529 = _v527.orientation
          _x = _v529
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val2.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v530 = val2.sensor_pose
          _v531 = _v530.header
          start = end
          end += 4
          (_v531.seq,) = _get_struct_I().unpack(str[start:end])
          _v532 = _v531.stamp
          _x = _v532
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v531.frame_id = str[start:end].decode('utf-8')
          else:
            _v531.frame_id = str[start:end]
          _v533 = _v530.pose
          _v534 = _v533.position
          _x = _v534
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v535 = _v533.orientation
          _x = _v535
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val2
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          val1.visibility_constraints.append(val2)
        self.request.trajectory_constraints.constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.request.reference_trajectories = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.GenericTrajectory()
        _v536 = val1.header
        start = end
        end += 4
        (_v536.seq,) = _get_struct_I().unpack(str[start:end])
        _v537 = _v536.stamp
        _x = _v537
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v536.frame_id = str[start:end].decode('utf-8')
        else:
          _v536.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.joint_trajectory = []
        for i in range(0, length):
          val2 = trajectory_msgs.msg.JointTrajectory()
          _v538 = val2.header
          start = end
          end += 4
          (_v538.seq,) = _get_struct_I().unpack(str[start:end])
          _v539 = _v538.stamp
          _x = _v539
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v538.frame_id = str[start:end].decode('utf-8')
          else:
            _v538.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.joint_names.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v540 = val3.time_from_start
            _x = _v540
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.joint_trajectory.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.cartesian_trajectory = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.CartesianTrajectory()
          _v541 = val2.header
          start = end
          end += 4
          (_v541.seq,) = _get_struct_I().unpack(str[start:end])
          _v542 = _v541.stamp
          _x = _v542
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v541.frame_id = str[start:end].decode('utf-8')
          else:
            _v541.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.tracked_frame = str[start:end].decode('utf-8')
          else:
            val2.tracked_frame = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.points = []
          for i in range(0, length):
            val3 = moveit_msgs.msg.CartesianTrajectoryPoint()
            _v543 = val3.point
            _v544 = _v543.pose
            _v545 = _v544.position
            _x = _v545
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v546 = _v544.orientation
            _x = _v546
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v547 = _v543.velocity
            _v548 = _v547.linear
            _x = _v548
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v549 = _v547.angular
            _x = _v549
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v550 = _v543.acceleration
            _v551 = _v550.linear
            _x = _v551
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v552 = _v550.angular
            _x = _v552
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v553 = val3.time_from_start
            _x = _v553
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            val2.points.append(val3)
          val1.cartesian_trajectory.append(val2)
        self.request.reference_trajectories.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.planner_id = str[start:end].decode('utf-8')
      else:
        self.request.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.group_name = str[start:end].decode('utf-8')
      else:
        self.request.group_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.request.num_planning_attempts, _x.request.allowed_planning_time, _x.request.max_velocity_scaling_factor, _x.request.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.planning_options.planning_scene_diff.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.planning_options.planning_scene_diff.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.planning_options.planning_scene_diff.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v554 = val1.translation
        _x = _v554
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v555 = val1.rotation
        _x = _v555
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v556 = val1.linear
        _x = _v556
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v557 = val1.angular
        _x = _v557
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v558 = val1.force
        _x = _v558
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v559 = val1.torque
        _x = _v559
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v560 = val1.object
        _v561 = _v560.header
        start = end
        end += 4
        (_v561.seq,) = _get_struct_I().unpack(str[start:end])
        _v562 = _v561.stamp
        _x = _v562
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v561.frame_id = str[start:end].decode('utf-8')
        else:
          _v561.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v560.id = str[start:end].decode('utf-8')
        else:
          _v560.id = str[start:end]
        _v563 = _v560.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v563.key = str[start:end].decode('utf-8')
        else:
          _v563.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v563.db = str[start:end].decode('utf-8')
        else:
          _v563.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v560.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v560.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v560.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v564 = val3.position
          _x = _v564
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v565 = val3.orientation
          _x = _v565
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v560.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v560.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v560.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v560.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v566 = val3.position
          _x = _v566
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v567 = val3.orientation
          _x = _v567
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v560.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v560.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v560.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v560.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v568 = val3.position
          _x = _v568
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v569 = val3.orientation
          _x = _v569
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v560.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v560.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v560.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v560.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v570 = val3.position
          _x = _v570
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v571 = val3.orientation
          _x = _v571
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v560.subframe_poses.append(val3)
        start = end
        end += 1
        (_v560.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v572 = val1.detach_posture
        _v573 = _v572.header
        start = end
        end += 4
        (_v573.seq,) = _get_struct_I().unpack(str[start:end])
        _v574 = _v573.stamp
        _x = _v574
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v573.frame_id = str[start:end].decode('utf-8')
        else:
          _v573.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v572.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v572.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v572.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v575 = val3.time_from_start
          _x = _v575
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v572.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.planning_options.planning_scene_diff.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v576 = val1.header
        start = end
        end += 4
        (_v576.seq,) = _get_struct_I().unpack(str[start:end])
        _v577 = _v576.stamp
        _x = _v577
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v576.frame_id = str[start:end].decode('utf-8')
        else:
          _v576.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v578 = val1.transform
        _v579 = _v578.translation
        _x = _v579
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v580 = _v578.rotation
        _x = _v580
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.enabled = list(map(bool, val1.enabled))
        self.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = list(map(bool, self.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v581 = val1.color
        _x = _v581
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v582 = val1.header
        start = end
        end += 4
        (_v582.seq,) = _get_struct_I().unpack(str[start:end])
        _v583 = _v582.stamp
        _x = _v583
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v582.frame_id = str[start:end].decode('utf-8')
        else:
          _v582.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v584 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v584.key = str[start:end].decode('utf-8')
        else:
          _v584.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v584.db = str[start:end].decode('utf-8')
        else:
          _v584.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v585 = val2.position
          _x = _v585
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v586 = val2.orientation
          _x = _v586
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v587 = val2.position
          _x = _v587
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v588 = val2.orientation
          _x = _v588
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v589 = val2.position
          _x = _v589
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v590 = val2.orientation
          _x = _v590
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.subframe_names.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.subframe_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v591 = val2.position
          _x = _v591
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v592 = val2.orientation
          _x = _v592
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.subframe_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.planning_options.planning_scene_diff.world.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8')
      else:
        self.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.planning_options.planning_scene_diff.world.octomap.octomap.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 28
      (_x.planning_options.planning_scene_diff.is_diff, _x.planning_options.plan_only, _x.planning_options.look_around, _x.planning_options.look_around_attempts, _x.planning_options.max_safe_execution_cost, _x.planning_options.replan, _x.planning_options.replan_attempts, _x.planning_options.replan_delay,) = _get_struct_3BidBid().unpack(str[start:end])
      self.planning_options.planning_scene_diff.is_diff = bool(self.planning_options.planning_scene_diff.is_diff)
      self.planning_options.plan_only = bool(self.planning_options.plan_only)
      self.planning_options.look_around = bool(self.planning_options.look_around)
      self.planning_options.replan = bool(self.planning_options.replan)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_3BidBid = None
def _get_struct_3BidBid():
    global _struct_3BidBid
    if _struct_3BidBid is None:
        _struct_3BidBid = struct.Struct("<3BidBid")
    return _struct_3BidBid
_struct_6d3I = None
def _get_struct_6d3I():
    global _struct_6d3I
    if _struct_6d3I is None:
        _struct_6d3I = struct.Struct("<6d3I")
    return _struct_6d3I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_i3d = None
def _get_struct_i3d():
    global _struct_i3d
    if _struct_i3d is None:
        _struct_i3d = struct.Struct("<i3d")
    return _struct_i3d
_struct_2dBd = None
def _get_struct_2dBd():
    global _struct_2dBd
    if _struct_2dBd is None:
        _struct_2dBd = struct.Struct("<2dBd")
    return _struct_2dBd
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
