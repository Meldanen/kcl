# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_igtl_bridge/igtlimage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class igtlimage(genpy.Message):
  _md5sum = "e004951b468cda99488e8b1294df4cef"
  _type = "ros_igtl_bridge/igtlimage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Image Message
string name
# Steps
int32 x_steps           
int32 y_steps           
int32 z_steps        

float32 x_spacing           
float32 y_spacing           
float32 z_spacing           

#sensor_msgs/Image rosimg
# Image data
uint8[] data		  
"""
  __slots__ = ['name','x_steps','y_steps','z_steps','x_spacing','y_spacing','z_spacing','data']
  _slot_types = ['string','int32','int32','int32','float32','float32','float32','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,x_steps,y_steps,z_steps,x_spacing,y_spacing,z_spacing,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(igtlimage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.x_steps is None:
        self.x_steps = 0
      if self.y_steps is None:
        self.y_steps = 0
      if self.z_steps is None:
        self.z_steps = 0
      if self.x_spacing is None:
        self.x_spacing = 0.
      if self.y_spacing is None:
        self.y_spacing = 0.
      if self.z_spacing is None:
        self.z_spacing = 0.
      if self.data is None:
        self.data = b''
    else:
      self.name = ''
      self.x_steps = 0
      self.y_steps = 0
      self.z_steps = 0
      self.x_spacing = 0.
      self.y_spacing = 0.
      self.z_spacing = 0.
      self.data = b''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3i3f().pack(_x.x_steps, _x.y_steps, _x.z_steps, _x.x_spacing, _x.y_spacing, _x.z_spacing))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.x_steps, _x.y_steps, _x.z_steps, _x.x_spacing, _x.y_spacing, _x.z_spacing,) = _get_struct_3i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3i3f().pack(_x.x_steps, _x.y_steps, _x.z_steps, _x.x_spacing, _x.y_spacing, _x.z_spacing))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.x_steps, _x.y_steps, _x.z_steps, _x.x_spacing, _x.y_spacing, _x.z_spacing,) = _get_struct_3i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i3f = None
def _get_struct_3i3f():
    global _struct_3i3f
    if _struct_3i3f is None:
        _struct_3i3f = struct.Struct("<3i3f")
    return _struct_3i3f
