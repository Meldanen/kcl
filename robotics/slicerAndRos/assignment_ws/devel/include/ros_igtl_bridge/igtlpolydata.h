// Generated by gencpp from file ros_igtl_bridge/igtlpolydata.msg
// DO NOT EDIT!


#ifndef ROS_IGTL_BRIDGE_MESSAGE_IGTLPOLYDATA_H
#define ROS_IGTL_BRIDGE_MESSAGE_IGTLPOLYDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <ros_igtl_bridge/vector.h>
#include <ros_igtl_bridge/vector.h>
#include <ros_igtl_bridge/vector.h>

namespace ros_igtl_bridge
{
template <class ContainerAllocator>
struct igtlpolydata_
{
  typedef igtlpolydata_<ContainerAllocator> Type;

  igtlpolydata_()
    : name()
    , points()
    , polygons()
    , strips()
    , lines()
    , verts()  {
    }
  igtlpolydata_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , points(_alloc)
    , polygons(_alloc)
    , strips(_alloc)
    , lines(_alloc)
    , verts(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _polygons_type;
  _polygons_type polygons;

   typedef std::vector< ::ros_igtl_bridge::vector_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_igtl_bridge::vector_<ContainerAllocator> >::other >  _strips_type;
  _strips_type strips;

   typedef std::vector< ::ros_igtl_bridge::vector_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_igtl_bridge::vector_<ContainerAllocator> >::other >  _lines_type;
  _lines_type lines;

   typedef std::vector< ::ros_igtl_bridge::vector_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_igtl_bridge::vector_<ContainerAllocator> >::other >  _verts_type;
  _verts_type verts;





  typedef boost::shared_ptr< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> const> ConstPtr;

}; // struct igtlpolydata_

typedef ::ros_igtl_bridge::igtlpolydata_<std::allocator<void> > igtlpolydata;

typedef boost::shared_ptr< ::ros_igtl_bridge::igtlpolydata > igtlpolydataPtr;
typedef boost::shared_ptr< ::ros_igtl_bridge::igtlpolydata const> igtlpolydataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_igtl_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'ros_igtl_bridge': ['/home/mikroszolos/kcl/robotics/slicerAndRos/assignment_ws/src/ROS-IGTL-Bridge/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8a567809576846ce15ffb57b198e0d5a";
  }

  static const char* value(const ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8a567809576846ceULL;
  static const uint64_t static_value2 = 0x15ffb57b198e0d5aULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_igtl_bridge/igtlpolydata";
  }

  static const char* value(const ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#---PolyData Message\n"
"\n"
"string name\n"
"geometry_msgs/Point32[] points\n"
"geometry_msgs/Point32[] polygons\n"
"vector[] strips\n"
"vector[] lines\n"
"vector[] verts\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: ros_igtl_bridge/vector\n"
"float32[] data\n"
;
  }

  static const char* value(const ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.points);
      stream.next(m.polygons);
      stream.next(m.strips);
      stream.next(m.lines);
      stream.next(m.verts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct igtlpolydata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_igtl_bridge::igtlpolydata_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "polygons[]" << std::endl;
    for (size_t i = 0; i < v.polygons.size(); ++i)
    {
      s << indent << "  polygons[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.polygons[i]);
    }
    s << indent << "strips[]" << std::endl;
    for (size_t i = 0; i < v.strips.size(); ++i)
    {
      s << indent << "  strips[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_igtl_bridge::vector_<ContainerAllocator> >::stream(s, indent + "    ", v.strips[i]);
    }
    s << indent << "lines[]" << std::endl;
    for (size_t i = 0; i < v.lines.size(); ++i)
    {
      s << indent << "  lines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_igtl_bridge::vector_<ContainerAllocator> >::stream(s, indent + "    ", v.lines[i]);
    }
    s << indent << "verts[]" << std::endl;
    for (size_t i = 0; i < v.verts.size(); ++i)
    {
      s << indent << "  verts[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_igtl_bridge::vector_<ContainerAllocator> >::stream(s, indent + "    ", v.verts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_IGTL_BRIDGE_MESSAGE_IGTLPOLYDATA_H
